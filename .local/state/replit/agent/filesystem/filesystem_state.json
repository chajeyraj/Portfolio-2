{"file_contents":{"Program.cs":{"content":"\nusing Microsoft.EntityFrameworkCore;\nusing Portfolio.Data;\nusing Portfolio.Services;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container\nbuilder.Services.AddControllers();\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\n// Add CORS\nbuilder.Services.AddCors(options =>\n{\n    options.AddPolicy(\"AllowAll\", builder =>\n    {\n        builder.AllowAnyOrigin()\n               .AllowAnyMethod()\n               .AllowAnyHeader();\n    });\n});\n\n// Add Entity Framework\nbuilder.Services.AddDbContext<PortfolioDbContext>(options =>\n    options.UseInMemoryDatabase(\"PortfolioDb\"));\n\n// Add custom services\nbuilder.Services.AddScoped<IStorageService, StorageService>();\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseCors(\"AllowAll\");\napp.UseAuthorization();\napp.MapControllers();\n\n// Serve static files for production\nif (!app.Environment.IsDevelopment())\n{\n    app.UseStaticFiles();\n    app.MapFallbackToFile(\"index.html\");\n}\n\n// Seed data\nusing (var scope = app.Services.CreateScope())\n{\n    var context = scope.ServiceProvider.GetRequiredService<PortfolioDbContext>();\n    var storage = scope.ServiceProvider.GetRequiredService<IStorageService>();\n    await storage.SeedDataAsync();\n}\n\napp.Run(\"http://0.0.0.0:5000\");\n","size_bytes":1388},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Portfolio Website\n\n## Overview\n\nThis is a modern, responsive portfolio website built with React, TypeScript, and Express.js. The application features a full-stack architecture with a React frontend using shadcn/ui components and a Node.js backend with PostgreSQL database integration via Drizzle ORM.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes\n\n### July 21, 2025 - Project Management & Horizontal Scrolling Layout\n- **Fixed Project Management Issue**: Resolved bug where new projects weren't appearing in the projects list after creation\n- **Added Complete API Endpoints**: Implemented missing POST, PUT, DELETE routes for projects with proper validation\n- **React Query Integration**: Converted admin dashboard to use React Query with proper cache invalidation for real-time updates\n- **Horizontal Scrolling Layout**: Updated Recent Projects section to display all items in horizontal scrolling format\n- **Enhanced Category Headers**: Improved visual design of the 4 category headings with gradient icons and decorative lines\n- **Custom Scrollbar Styling**: Added smooth custom scrollbars for better horizontal scrolling experience\n- **Mobile-Optimized Scrolling**: Enhanced touch scrolling behavior for mobile devices\n- **Public Review Collection**: Added \"Leave a Review\" button in Client Testimonials section with form fields for Name, Facebook ID, Comment, and Rating\n- **Client Testimonials Horizontal Scrolling**: Converted testimonials to horizontal scrolling layout with scroll indicators\n- **Review Form Validation**: Implemented proper form validation and error handling for public review submissions\n- **Direct File Upload**: Added ability to upload images/GIFs directly in admin dashboard instead of just URLs, with 10MB limit and support for JPEG, PNG, GIF, WebP formats\n- **File Upload API**: Implemented multer-based file upload endpoint with proper validation and static file serving\n\n### July 14, 2025 - Enhanced About Section & Footer\n- **About Section Redesign**: Complete layout overhaul with centered card design, improved visual hierarchy, and better content organization\n- **Enhanced Background Animation**: Added flowing wave animations with layered particle effects for more dynamic visual appeal\n- **Modern Footer Implementation**: Created comprehensive footer with brand section, navigation links, social media icons, and smooth hover animations\n- **Glass Effect Enhancements**: Added additional CSS classes for stronger glass morphism effects throughout the application\n- **Mobile Responsiveness**: Improved responsive design for all new components across different screen sizes\n\n### July 14, 2025 - Project Categorization System\n- **Project Categories**: Divided projects into four distinct categories with unique visual styling:\n  - **Figma Work**: UI/UX design and prototypes (pink/purple gradient)\n  - **Frontend Work**: React, HTML, CSS, animations (blue/cyan gradient)\n  - **Full Stack Projects**: Backend integration, APIs, databases (green/emerald gradient)\n  - **Animation Work**: Creative motion design, scroll effects, interactive UI (orange/red gradient)\n- **Enhanced Project Layout**: Each category has its own section with themed header, icons, and color-coded project cards\n- **Database Schema Update**: Added category field to projects table with proper TypeScript integration\n- **Sample Project Data**: Created representative projects for each category to demonstrate the portfolio range\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **UI Library**: shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with CSS variables for theming\n- **State Management**: TanStack React Query for server state\n- **Routing**: Wouter for client-side routing\n- **Animations**: Framer Motion for smooth transitions\n- **Build Tool**: Vite for development and production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Database**: PostgreSQL with Drizzle ORM\n- **Database Provider**: Neon Database (serverless PostgreSQL)\n- **API Style**: RESTful JSON APIs\n- **Development**: Hot module replacement with Vite integration\n\n## Key Components\n\n### Database Schema\nThe application uses four main entities:\n- **Projects**: Portfolio projects with title, description, technologies, and links\n- **Experiences**: Work experience entries with company details and tech stack\n- **Contacts**: Contact form submissions with client information\n- **Testimonials**: Client testimonials with ratings and content\n\n### Frontend Components\n- **Navigation**: Responsive navigation with theme switching\n- **Hero Section**: Landing page with animated background\n- **About Section**: Personal information and skills showcase\n- **Projects Section**: Grid display of portfolio projects\n- **Experience Section**: Timeline of work experience and testimonials\n- **Contact Section**: Contact form with validation\n- **Theme Provider**: Dark/light mode toggle functionality\n\n### Backend Services\n- **Storage Layer**: Abstracted storage interface with in-memory implementation\n- **API Routes**: RESTful endpoints for all CRUD operations\n- **Middleware**: Request logging and error handling\n- **Development Server**: Vite integration for hot reloading\n\n## Data Flow\n\n1. **Client Requests**: Frontend makes API calls using TanStack React Query\n2. **API Processing**: Express.js routes handle requests and validate data\n3. **Database Operations**: Drizzle ORM executes PostgreSQL queries\n4. **Response Handling**: JSON responses sent back to client\n5. **State Updates**: React Query manages cache invalidation and updates\n\n## External Dependencies\n\n### Core Libraries\n- **@tanstack/react-query**: Server state management\n- **drizzle-orm**: Type-safe database queries\n- **@neondatabase/serverless**: PostgreSQL connection\n- **framer-motion**: Animation library\n- **react-hook-form**: Form handling with validation\n- **zod**: Runtime type validation\n\n### UI Components\n- **@radix-ui/***: Accessible UI primitives\n- **lucide-react**: Icon library\n- **tailwindcss**: Utility-first CSS framework\n- **class-variance-authority**: Variant-based styling\n\n### Development Tools\n- **tsx**: TypeScript execution for development\n- **esbuild**: Fast bundler for production\n- **vite**: Development server and build tool\n\n## Deployment Strategy\n\n### Development Environment\n- **Command**: `npm run dev` - Runs development server with hot reloading\n- **Database**: Uses Drizzle push for schema synchronization\n- **Assets**: Served through Vite development server\n\n### Production Build\n- **Frontend**: Vite builds optimized React application\n- **Backend**: esbuild bundles Node.js server with ESM format\n- **Database**: Migrations handled through Drizzle Kit\n- **Static Assets**: Built to `dist/public` directory\n\n### Environment Configuration\n- **DATABASE_URL**: Required PostgreSQL connection string\n- **NODE_ENV**: Environment detection for conditional features\n- **REPL_ID**: Replit-specific development features\n\nThe application follows a modern full-stack pattern with clear separation of concerns, type safety throughout, and responsive design principles.","size_bytes":7204},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"Controllers/ContactController.cs":{"content":"\nusing Microsoft.AspNetCore.Mvc;\nusing Portfolio.Models;\nusing Portfolio.Services;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace Portfolio.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class ContactController : ControllerBase\n    {\n        private readonly IStorageService _storage;\n\n        public ContactController(IStorageService storage)\n        {\n            _storage = storage;\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> CreateContact([FromBody] ContactRequest request)\n        {\n            try\n            {\n                if (!ModelState.IsValid)\n                {\n                    return BadRequest(new { message = \"Invalid form data\", errors = ModelState });\n                }\n\n                var contact = new Contact\n                {\n                    Name = request.Name,\n                    Email = request.Email,\n                    Subject = request.Subject,\n                    Message = request.Message\n                };\n\n                var createdContact = await _storage.CreateContactAsync(contact);\n                return CreatedAtAction(nameof(CreateContact), new { message = \"Contact form submitted successfully\", contact = createdContact });\n            }\n            catch (Exception)\n            {\n                return StatusCode(500, new { message = \"Failed to submit contact form\" });\n            }\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetAllContacts()\n        {\n            try\n            {\n                var contacts = await _storage.GetAllContactsAsync();\n                return Ok(contacts);\n            }\n            catch (Exception)\n            {\n                return StatusCode(500, new { message = \"Failed to fetch contacts\" });\n            }\n        }\n    }\n\n    public class ContactRequest\n    {\n        [Required]\n        public string Name { get; set; } = string.Empty;\n\n        [Required]\n        [EmailAddress]\n        public string Email { get; set; } = string.Empty;\n\n        [Required]\n        public string Subject { get; set; } = string.Empty;\n\n        [Required]\n        public string Message { get; set; } = string.Empty;\n    }\n}\n","size_bytes":2200},"Controllers/ExperiencesController.cs":{"content":"\nusing Microsoft.AspNetCore.Mvc;\nusing Portfolio.Services;\n\nnamespace Portfolio.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class ExperiencesController : ControllerBase\n    {\n        private readonly IStorageService _storage;\n\n        public ExperiencesController(IStorageService storage)\n        {\n            _storage = storage;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetAllExperiences()\n        {\n            try\n            {\n                var experiences = await _storage.GetAllExperiencesAsync();\n                return Ok(experiences);\n            }\n            catch (Exception)\n            {\n                return StatusCode(500, new { message = \"Failed to fetch experiences\" });\n            }\n        }\n    }\n}\n","size_bytes":788},"Controllers/ProjectsController.cs":{"content":"\nusing Microsoft.AspNetCore.Mvc;\nusing Portfolio.Services;\n\nnamespace Portfolio.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class ProjectsController : ControllerBase\n    {\n        private readonly IStorageService _storage;\n\n        public ProjectsController(IStorageService storage)\n        {\n            _storage = storage;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetAllProjects()\n        {\n            try\n            {\n                var projects = await _storage.GetAllProjectsAsync();\n                return Ok(projects);\n            }\n            catch (Exception)\n            {\n                return StatusCode(500, new { message = \"Failed to fetch projects\" });\n            }\n        }\n\n        [HttpGet(\"featured\")]\n        public async Task<IActionResult> GetFeaturedProjects()\n        {\n            try\n            {\n                var projects = await _storage.GetFeaturedProjectsAsync();\n                return Ok(projects);\n            }\n            catch (Exception)\n            {\n                return StatusCode(500, new { message = \"Failed to fetch featured projects\" });\n            }\n        }\n\n        [HttpGet(\"{id}\")]\n        public async Task<IActionResult> GetProjectById(int id)\n        {\n            try\n            {\n                var project = await _storage.GetProjectByIdAsync(id);\n                if (project == null)\n                {\n                    return NotFound(new { message = \"Project not found\" });\n                }\n                return Ok(project);\n            }\n            catch (Exception)\n            {\n                return StatusCode(500, new { message = \"Failed to fetch project\" });\n            }\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> CreateProject([FromBody] Models.Project project)\n        {\n            try\n            {\n                var createdProject = await _storage.CreateProjectAsync(project);\n                return CreatedAtAction(nameof(GetProjectById), new { id = createdProject.Id }, createdProject);\n            }\n            catch (Exception)\n            {\n                return StatusCode(500, new { message = \"Failed to create project\" });\n            }\n        }\n\n        [HttpPut(\"{id}\")]\n        public async Task<IActionResult> UpdateProject(int id, [FromBody] Models.Project project)\n        {\n            try\n            {\n                project.Id = id;\n                var updatedProject = await _storage.UpdateProjectAsync(project);\n                if (updatedProject == null)\n                {\n                    return NotFound(new { message = \"Project not found\" });\n                }\n                return Ok(updatedProject);\n            }\n            catch (Exception)\n            {\n                return StatusCode(500, new { message = \"Failed to update project\" });\n            }\n        }\n\n        [HttpDelete(\"{id}\")]\n        public async Task<IActionResult> DeleteProject(int id)\n        {\n            try\n            {\n                var deleted = await _storage.DeleteProjectAsync(id);\n                if (!deleted)\n                {\n                    return NotFound(new { message = \"Project not found\" });\n                }\n                return Ok(new { message = \"Project deleted successfully\" });\n            }\n            catch (Exception)\n            {\n                return StatusCode(500, new { message = \"Failed to delete project\" });\n            }\n        }\n    }\n}\n","size_bytes":3488},"Controllers/TestimonialsController.cs":{"content":"\nusing Microsoft.AspNetCore.Mvc;\nusing Portfolio.Services;\n\nnamespace Portfolio.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class TestimonialsController : ControllerBase\n    {\n        private readonly IStorageService _storage;\n\n        public TestimonialsController(IStorageService storage)\n        {\n            _storage = storage;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetAllTestimonials()\n        {\n            try\n            {\n                var testimonials = await _storage.GetAllTestimonialsAsync();\n                return Ok(testimonials);\n            }\n            catch (Exception)\n            {\n                return StatusCode(500, new { message = \"Failed to fetch testimonials\" });\n            }\n        }\n    }\n}\n","size_bytes":795},"Data/PortfolioDbContext.cs":{"content":"\nusing Microsoft.EntityFrameworkCore;\nusing Portfolio.Models;\nusing System.Text.Json;\n\nnamespace Portfolio.Data\n{\n    public class PortfolioDbContext : DbContext\n    {\n        public PortfolioDbContext(DbContextOptions<PortfolioDbContext> options) : base(options) { }\n\n        public DbSet<Project> Projects { get; set; }\n        public DbSet<Experience> Experiences { get; set; }\n        public DbSet<Contact> Contacts { get; set; }\n        public DbSet<Testimonial> Testimonials { get; set; }\n\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            // Configure JSON conversion for Technologies list\n            modelBuilder.Entity<Project>()\n                .Property(e => e.Technologies)\n                .HasConversion(\n                    v => JsonSerializer.Serialize(v, JsonSerializerOptions.Default),\n                    v => JsonSerializer.Deserialize<List<string>>(v, JsonSerializerOptions.Default) ?? new List<string>());\n\n            modelBuilder.Entity<Experience>()\n                .Property(e => e.Technologies)\n                .HasConversion(\n                    v => JsonSerializer.Serialize(v, JsonSerializerOptions.Default),\n                    v => JsonSerializer.Deserialize<List<string>>(v, JsonSerializerOptions.Default) ?? new List<string>());\n\n            base.OnModelCreating(modelBuilder);\n        }\n    }\n}\n","size_bytes":1377},"Models/Contact.cs":{"content":"\nusing System.ComponentModel.DataAnnotations;\n\nnamespace Portfolio.Models\n{\n    public class Contact\n    {\n        public int Id { get; set; }\n        \n        [Required]\n        public string Name { get; set; } = string.Empty;\n        \n        [Required]\n        [EmailAddress]\n        public string Email { get; set; } = string.Empty;\n        \n        [Required]\n        public string Subject { get; set; } = string.Empty;\n        \n        [Required]\n        public string Message { get; set; } = string.Empty;\n        \n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n","size_bytes":597},"Models/Experience.cs":{"content":"\nusing System.ComponentModel.DataAnnotations;\n\nnamespace Portfolio.Models\n{\n    public class Experience\n    {\n        public int Id { get; set; }\n        \n        [Required]\n        public string Title { get; set; } = string.Empty;\n        \n        [Required]\n        public string Company { get; set; } = string.Empty;\n        \n        [Required]\n        public string Description { get; set; } = string.Empty;\n        \n        public List<string> Technologies { get; set; } = new();\n        \n        [Required]\n        public string StartDate { get; set; } = string.Empty;\n        \n        public string? EndDate { get; set; }\n        \n        public bool Current { get; set; }\n    }\n}\n","size_bytes":688},"Models/Project.cs":{"content":"\nusing System.ComponentModel.DataAnnotations;\n\nnamespace Portfolio.Models\n{\n    public class Project\n    {\n        public int Id { get; set; }\n        \n        [Required]\n        public string Title { get; set; } = string.Empty;\n        \n        [Required]\n        public string Description { get; set; } = string.Empty;\n        \n        public string Image { get; set; } = string.Empty;\n        \n        public List<string> Technologies { get; set; } = new();\n        \n        public string? GithubUrl { get; set; }\n        \n        public string? LiveUrl { get; set; }\n        \n        public bool Featured { get; set; }\n        \n        [Required]\n        public string Category { get; set; } = string.Empty;\n    }\n}\n","size_bytes":720},"Models/Testimonial.cs":{"content":"\nusing System.ComponentModel.DataAnnotations;\n\nnamespace Portfolio.Models\n{\n    public class Testimonial\n    {\n        public int Id { get; set; }\n        \n        [Required]\n        public string Name { get; set; } = string.Empty;\n        \n        [Required]\n        public string Title { get; set; } = string.Empty;\n        \n        [Required]\n        public string Content { get; set; } = string.Empty;\n        \n        public string? Avatar { get; set; }\n        \n        [Range(1, 5)]\n        public int Rating { get; set; }\n    }\n}\n","size_bytes":538},"Services/IStorageService.cs":{"content":"using Portfolio.Models;\n\nnamespace Portfolio.Services\n{\n    public interface IStorageService\n    {\n        Task<List<Project>> GetAllProjectsAsync();\n        Task<List<Project>> GetFeaturedProjectsAsync();\n        Task<Project?> GetProjectByIdAsync(int id);\n        Task<Project> CreateProjectAsync(Project project);\n        Task<Project?> UpdateProjectAsync(Project project);\n        Task<bool> DeleteProjectAsync(int id);\n        Task<List<Experience>> GetAllExperiencesAsync();\n        Task<List<Testimonial>> GetAllTestimonialsAsync();\n        Task<List<Contact>> GetAllContactsAsync();\n        Task<Contact> CreateContactAsync(Contact contact);\n        Task SeedDataAsync();\n    }\n}","size_bytes":687},"Services/StorageService.cs":{"content":"using Microsoft.EntityFrameworkCore;\nusing Portfolio.Data;\nusing Portfolio.Models;\n\nnamespace Portfolio.Services\n{\n    public class StorageService : IStorageService\n    {\n        private readonly PortfolioDbContext _context;\n\n        public StorageService(PortfolioDbContext context)\n        {\n            _context = context;\n        }\n\n        public async Task<List<Project>> GetAllProjectsAsync()\n        {\n            return await _context.Projects.ToListAsync();\n        }\n\n        public async Task<List<Project>> GetFeaturedProjectsAsync()\n        {\n            return await _context.Projects.Where(p => p.Featured).ToListAsync();\n        }\n\n        public async Task<Project?> GetProjectByIdAsync(int id)\n        {\n            return await _context.Projects.FindAsync(id);\n        }\n\n        public async Task<List<Experience>> GetAllExperiencesAsync()\n        {\n            return await _context.Experiences.OrderByDescending(e => e.StartDate).ToListAsync();\n        }\n\n        public async Task<List<Testimonial>> GetAllTestimonialsAsync()\n        {\n            return await _context.Testimonials.ToListAsync();\n        }\n\n        public async Task<List<Contact>> GetAllContactsAsync()\n        {\n            return await _context.Contacts.OrderByDescending(c => c.CreatedAt).ToListAsync();\n        }\n\n        public async Task<Contact> CreateContactAsync(Contact contact)\n        {\n            _context.Contacts.Add(contact);\n            await _context.SaveChangesAsync();\n            return contact;\n        }\n\n        public async Task SeedDataAsync()\n        {\n            if (await _context.Projects.AnyAsync()) return;\n\n            var projects = new List<Project>\n            {\n                new Project\n                {\n                    Title = \"Modern Dashboard UI\",\n                    Description = \"Complete UI/UX design system with interactive prototypes for a SaaS analytics platform\",\n                    Image = \"https://images.unsplash.com/photo-1611224923853-80b023f02d71?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\",\n                    Technologies = new List<string> { \"Figma\", \"UI/UX\", \"Prototyping\", \"Design System\" },\n                    GithubUrl = \"https://github.com/chanakaprasanna/dashboard-ui\",\n                    LiveUrl = \"https://figma.com/dashboard-prototype\",\n                    Featured = true,\n                    Category = \"figma\"\n                },\n                new Project\n                {\n                    Title = \"Interactive Portfolio\",\n                    Description = \"Modern portfolio website with advanced animations and responsive design\",\n                    Image = \"https://images.unsplash.com/photo-1467232004584-a241de8bcf5d?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\",\n                    Technologies = new List<string> { \"React\", \"TypeScript\", \"Tailwind CSS\", \"Framer Motion\" },\n                    GithubUrl = \"https://github.com/chanakaprasanna/portfolio\",\n                    LiveUrl = \"https://chanakaprasanna.dev\",\n                    Featured = true,\n                    Category = \"frontend\"\n                },\n                new Project\n                {\n                    Title = \"Personal Assistant\",\n                    Description = \"Contextual Conversations Using RAG - Advanced AI assistant with natural language processing capabilities\",\n                    Image = \"https://images.unsplash.com/photo-1677442136019-21780ecad995?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\",\n                    Technologies = new List<string> { \"Python\", \"RAG\", \"NLP\", \"OpenAI\", \"PostgreSQL\" },\n                    GithubUrl = \"https://github.com/chanakaprasanna/personal-assistant\",\n                    LiveUrl = \"https://personal-assistant-demo.com\",\n                    Featured = true,\n                    Category = \"full-stack\"\n                },\n                // Add your new projects here - Replace this with your actual project details\n                new Project\n                {\n                    Title = \"E-Commerce Platform\",\n                    Description = \"Full-stack e-commerce solution with payment integration and admin dashboard\",\n                    Image = \"https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\",\n                    Technologies = new List<string> { \"React\", \"ASP.NET Core\", \"Entity Framework\", \"Stripe\" },\n                    GithubUrl = \"https://github.com/yourusername/ecommerce-platform\",\n                    LiveUrl = \"https://your-ecommerce-demo.com\",\n                    Featured = true,\n                    Category = \"full-stack\"\n                }\n            };\n\n            var experiences = new List<Experience>\n            {\n                new Experience\n                {\n                    Title = \"Software Engineer Intern\",\n                    Company = \"Infinity Innovators\",\n                    Description = \"Developed MyRide, a comprehensive vehicle management app with React Native for the front end and AWS serverless architecture for the back end. Collaborated with team members to deliver a production-ready mobile application.\",\n                    Technologies = new List<string> { \"React Native\", \"AWS\", \"Serverless\", \"Node.js\" },\n                    StartDate = \"2023-06\",\n                    EndDate = \"2023-12\",\n                    Current = false\n                },\n                new Experience\n                {\n                    Title = \"Freelance App Developer\",\n                    Company = \"Independent\",\n                    Description = \"Designed and developed mobile apps for iOS and Android, as well as web applications, using React Native Expo and Next.js. Delivered custom solutions for various clients with focus on user experience and performance.\",\n                    Technologies = new List<string> { \"React Native\", \"Next.js\", \"Expo\", \"JavaScript\" },\n                    StartDate = \"2022-01\",\n                    Current = true\n                }\n            };\n\n            var testimonials = new List<Testimonial>\n            {\n                new Testimonial\n                {\n                    Name = \"Mathesh\",\n                    Title = \"Software Engineer\",\n                    Content = \"Excellent work on the mobile application. The user interface is intuitive and the performance is outstanding.\",\n                    Rating = 5\n                },\n                new Testimonial\n                {\n                    Name = \"Sarah Johnson\",\n                    Title = \"Product Manager\",\n                    Content = \"Professional and reliable developer. Delivered high-quality work on time and exceeded expectations.\",\n                    Rating = 5\n                }\n            };\n\n            _context.Projects.AddRange(projects);\n            _context.Experiences.AddRange(experiences);\n            _context.Testimonials.AddRange(testimonials);\n            await _context.SaveChangesAsync();\n        }\n\n        public async Task<Project> CreateProjectAsync(Project project)\n        {\n            _context.Projects.Add(project);\n            await _context.SaveChangesAsync();\n            return project;\n        }\n\n        public async Task<Project?> UpdateProjectAsync(Project project)\n        {\n            var existingProject = await _context.Projects.FindAsync(project.Id);\n            if (existingProject == null)\n            {\n                return null;\n            }\n\n            _context.Entry(existingProject).CurrentValues.SetValues(project);\n            await _context.SaveChangesAsync();\n            return existingProject;\n        }\n\n        public async Task<bool> DeleteProjectAsync(int id)\n        {\n            var project = await _context.Projects.FindAsync(id);\n            if (project == null)\n            {\n                return false;\n            }\n\n            _context.Projects.Remove(project);\n            await _context.SaveChangesAsync();\n            return true;\n        }\n    }\n}","size_bytes":7978},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/routes.ts":{"content":"import express, { type Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport { storage } from \"./storage\";\nimport { insertContactSchema, insertProjectSchema, insertTestimonialSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Configure multer for file uploads\n  const uploadStorage = multer.diskStorage({\n    destination: (req, file, cb) => {\n      cb(null, 'uploads/');\n    },\n    filename: (req, file, cb) => {\n      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n      cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));\n    }\n  });\n\n  const upload = multer({\n    storage: uploadStorage,\n    limits: {\n      fileSize: 10 * 1024 * 1024, // 10MB limit\n    },\n    fileFilter: (req, file, cb) => {\n      const allowedTypes = /jpeg|jpg|png|gif|webp/;\n      const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());\n      const mimetype = allowedTypes.test(file.mimetype);\n      \n      if (mimetype && extname) {\n        return cb(null, true);\n      } else {\n        cb(new Error('Only image files (JPEG, JPG, PNG, GIF, WebP) are allowed!'));\n      }\n    }\n  });\n\n  // Serve uploaded files statically\n  app.use('/uploads', express.static('uploads'));\n\n  // File upload endpoint\n  app.post(\"/api/upload\", upload.single('image'), (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n      \n      const fileUrl = `/uploads/${req.file.filename}`;\n      res.json({ \n        message: \"File uploaded successfully\", \n        url: fileUrl,\n        filename: req.file.filename,\n        originalname: req.file.originalname,\n        size: req.file.size\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to upload file\" });\n    }\n  });\n\n  // Projects endpoints\n  app.get(\"/api/projects\", async (req, res) => {\n    try {\n      const projects = await storage.getAllProjects();\n      res.json(projects);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch projects\" });\n    }\n  });\n\n  app.get(\"/api/projects/featured\", async (req, res) => {\n    try {\n      const projects = await storage.getFeaturedProjects();\n      res.json(projects);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch featured projects\" });\n    }\n  });\n\n  app.get(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const project = await storage.getProjectById(id);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch project\" });\n    }\n  });\n\n  app.post(\"/api/projects\", async (req, res) => {\n    try {\n      const projectData = insertProjectSchema.parse(req.body);\n      const project = await storage.createProject(projectData);\n      res.status(201).json(project);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Invalid project data\", \n          errors: error.errors \n        });\n      }\n      res.status(500).json({ message: \"Failed to create project\" });\n    }\n  });\n\n  app.put(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const projectData = insertProjectSchema.partial().parse(req.body);\n      const project = await storage.updateProject(id, projectData);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Invalid project data\", \n          errors: error.errors \n        });\n      }\n      res.status(500).json({ message: \"Failed to update project\" });\n    }\n  });\n\n  app.delete(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const deleted = await storage.deleteProject(id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.json({ message: \"Project deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete project\" });\n    }\n  });\n\n  // Experiences endpoints\n  app.get(\"/api/experiences\", async (req, res) => {\n    try {\n      const experiences = await storage.getAllExperiences();\n      res.json(experiences);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch experiences\" });\n    }\n  });\n\n  // Testimonials endpoints\n  app.get(\"/api/testimonials\", async (req, res) => {\n    try {\n      const testimonials = await storage.getAllTestimonials();\n      res.json(testimonials);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch testimonials\" });\n    }\n  });\n\n  app.post(\"/api/testimonials\", async (req, res) => {\n    try {\n      const testimonialData = insertTestimonialSchema.parse(req.body);\n      const testimonial = await storage.createTestimonial(testimonialData);\n      res.status(201).json({ message: \"Review submitted successfully\", testimonial });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Invalid review data\", \n          errors: error.errors \n        });\n      }\n      res.status(500).json({ message: \"Failed to submit review\" });\n    }\n  });\n\n  // Contact form endpoint\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      const contactData = insertContactSchema.parse(req.body);\n      const contact = await storage.createContact(contactData);\n      res.status(201).json({ message: \"Contact form submitted successfully\", contact });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Invalid form data\", \n          errors: error.errors \n        });\n      }\n      res.status(500).json({ message: \"Failed to submit contact form\" });\n    }\n  });\n\n  // Get all contacts (admin endpoint)\n  app.get(\"/api/contacts\", async (req, res) => {\n    try {\n      const contacts = await storage.getAllContacts();\n      res.json(contacts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch contacts\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":6561},"server/storage.ts":{"content":"import { \n  projects, \n  experiences, \n  contacts, \n  testimonials,\n  type Project, \n  type Experience, \n  type Contact, \n  type Testimonial,\n  type InsertProject, \n  type InsertExperience, \n  type InsertContact, \n  type InsertTestimonial \n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // Projects\n  getAllProjects(): Promise<Project[]>;\n  getFeaturedProjects(): Promise<Project[]>;\n  getProjectById(id: number): Promise<Project | undefined>;\n  createProject(project: InsertProject): Promise<Project>;\n  updateProject(id: number, project: Partial<InsertProject>): Promise<Project | undefined>;\n  deleteProject(id: number): Promise<boolean>;\n  \n  // Experiences\n  getAllExperiences(): Promise<Experience[]>;\n  createExperience(experience: InsertExperience): Promise<Experience>;\n  \n  // Contacts\n  getAllContacts(): Promise<Contact[]>;\n  createContact(contact: InsertContact): Promise<Contact>;\n  \n  // Testimonials\n  getAllTestimonials(): Promise<Testimonial[]>;\n  createTestimonial(testimonial: InsertTestimonial): Promise<Testimonial>;\n}\n\nexport class MemStorage implements IStorage {\n  private projects: Map<number, Project>;\n  private experiences: Map<number, Experience>;\n  private contacts: Map<number, Contact>;\n  private testimonials: Map<number, Testimonial>;\n  private currentProjectId: number;\n  private currentExperienceId: number;\n  private currentContactId: number;\n  private currentTestimonialId: number;\n\n  constructor() {\n    this.projects = new Map();\n    this.experiences = new Map();\n    this.contacts = new Map();\n    this.testimonials = new Map();\n    this.currentProjectId = 1;\n    this.currentExperienceId = 1;\n    this.currentContactId = 1;\n    this.currentTestimonialId = 1;\n    \n    this.seedData();\n  }\n\n  private seedData() {\n    // Seed projects by category\n    const seedProjects: InsertProject[] = [\n      // Figma Work (UI/UX design and prototypes)\n      {\n        title: \"Modern Dashboard UI\",\n        description: \"Complete UI/UX design system with interactive prototypes for a SaaS analytics platform\",\n        image: \"https://images.unsplash.com/photo-1611224923853-80b023f02d71?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\",\n        technologies: [\"Figma\", \"UI/UX\", \"Prototyping\", \"Design System\"],\n        githubUrl: \"https://github.com/chanakaprasanna/dashboard-ui\",\n        liveUrl: \"https://figma.com/dashboard-prototype\",\n        featured: 1,\n        category: \"figma\"\n      },\n      {\n        title: \"Mobile App Design\",\n        description: \"Complete mobile app design with user journey mapping and interactive prototypes\",\n        image: \"https://images.unsplash.com/photo-1512941937669-90a1b58e7e9c?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\",\n        technologies: [\"Figma\", \"Mobile Design\", \"User Research\", \"Wireframing\"],\n        githubUrl: \"https://github.com/chanakaprasanna/mobile-design\",\n        liveUrl: \"https://figma.com/mobile-app-prototype\",\n        featured: 0,\n        category: \"figma\"\n      },\n      \n      // Frontend Work (React, HTML, CSS, animations)\n      {\n        title: \"Interactive Portfolio\",\n        description: \"Modern portfolio website with advanced animations and responsive design\",\n        image: \"https://images.unsplash.com/photo-1467232004584-a241de8bcf5d?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\",\n        technologies: [\"React\", \"TypeScript\", \"Tailwind CSS\", \"Framer Motion\"],\n        githubUrl: \"https://github.com/chanakaprasanna/portfolio\",\n        liveUrl: \"https://chanakaprasanna.dev\",\n        featured: 1,\n        category: \"frontend\"\n      },\n      {\n        title: \"E-commerce Landing Page\",\n        description: \"High-converting landing page with modern design and smooth animations\",\n        image: \"https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\",\n        technologies: [\"React\", \"Next.js\", \"CSS3\", \"GSAP\"],\n        githubUrl: \"https://github.com/chanakaprasanna/ecommerce-landing\",\n        liveUrl: \"https://ecommerce-landing-demo.com\",\n        featured: 0,\n        category: \"frontend\"\n      },\n      \n      // Full Stack Projects (with backend integration, APIs, databases)\n      {\n        title: \"Personal Assistant\",\n        description: \"Contextual Conversations Using RAG - Advanced AI assistant with natural language processing capabilities\",\n        image: \"https://images.unsplash.com/photo-1677442136019-21780ecad995?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\",\n        technologies: [\"Python\", \"RAG\", \"NLP\", \"OpenAI\", \"PostgreSQL\"],\n        githubUrl: \"https://github.com/chanakaprasanna/personal-assistant\",\n        liveUrl: \"https://personal-assistant-demo.com\",\n        featured: 1,\n        category: \"full-stack\"\n      },\n      {\n        title: \"Potato Disease Prediction\",\n        description: \"Deep Learning-based Image Classification for Identifying Potato Diseases using CNN\",\n        image: \"https://images.unsplash.com/photo-1416879595882-3373a0480b5b?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\",\n        technologies: [\"TensorFlow\", \"CNN\", \"Computer Vision\", \"Python\", \"Flask\"],\n        githubUrl: \"https://github.com/chanakaprasanna/potato-disease\",\n        featured: 1,\n        category: \"full-stack\"\n      },\n      {\n        title: \"SmartPOS System\",\n        description: \"Retail Management System with real-time inventory, sales processing, and analytics\",\n        image: \"https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\",\n        technologies: [\"React\", \"Node.js\", \"MongoDB\", \"Express\"],\n        githubUrl: \"https://github.com/chanakaprasanna/smartpos\",\n        featured: 0,\n        category: \"full-stack\"\n      },\n      {\n        title: \"Blog Generator\",\n        description: \"Transforming YouTube videos into high-quality blog posts with AI agents and automation\",\n        image: \"https://images.unsplash.com/photo-1516321318423-f06f85e504b3?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\",\n        technologies: [\"OpenAI\", \"LangChain\", \"React\", \"Node.js\", \"MongoDB\"],\n        githubUrl: \"https://github.com/chanakaprasanna/blog-generator\",\n        liveUrl: \"https://blog-generator-demo.com\",\n        featured: 1,\n        category: \"full-stack\"\n      },\n      \n      // Animation Work (creative motion design, scroll effects, interactive UI)\n      {\n        title: \"Scroll-Based Storytelling\",\n        description: \"Interactive storytelling website with advanced scroll-triggered animations\",\n        image: \"https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\",\n        technologies: [\"GSAP\", \"ScrollMagic\", \"Three.js\", \"WebGL\"],\n        githubUrl: \"https://github.com/chanakaprasanna/scroll-story\",\n        liveUrl: \"https://scroll-story-demo.com\",\n        featured: 1,\n        category: \"animation\"\n      },\n      {\n        title: \"Interactive 3D Gallery\",\n        description: \"Immersive 3D gallery with particle effects and interactive animations\",\n        image: \"https://images.unsplash.com/photo-1501504905252-473c47e087f8?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\",\n        technologies: [\"Three.js\", \"WebGL\", \"Framer Motion\", \"React\"],\n        githubUrl: \"https://github.com/chanakaprasanna/3d-gallery\",\n        liveUrl: \"https://3d-gallery-demo.com\",\n        featured: 0,\n        category: \"animation\"\n      }\n    ];\n\n    seedProjects.forEach(project => {\n      this.createProject(project);\n    });\n\n    // Seed experiences\n    const seedExperiences: InsertExperience[] = [\n      {\n        title: \"Software Engineer Intern\",\n        company: \"Infinity Innovators\",\n        description: \"Developed MyRide, a comprehensive vehicle management app with React Native for the front end and AWS serverless architecture for the back end. Collaborated with team members to deliver a production-ready mobile application.\",\n        technologies: [\"React Native\", \"AWS\", \"Serverless\", \"Node.js\"],\n        startDate: \"2023-06\",\n        endDate: \"2023-12\",\n        current: 0\n      },\n      {\n        title: \"Freelance App Developer\",\n        company: \"Independent\",\n        description: \"Designed and developed mobile apps for iOS and Android, as well as web applications, using React Native Expo and Next.js. Delivered custom solutions for various clients with focus on user experience and performance.\",\n        technologies: [\"React Native\", \"Next.js\", \"Expo\", \"JavaScript\"],\n        startDate: \"2022-01\",\n        current: 1\n      }\n    ];\n\n    seedExperiences.forEach(experience => {\n      this.createExperience(experience);\n    });\n\n    // Seed testimonials\n    const seedTestimonials: InsertTestimonial[] = [\n      {\n        name: \"Mathesh\",\n        title: \"Software Engineer Trainee\",\n        company: \"Infinity Innovators\",\n        content: \"I had the pleasure of working with Chanaka during our internship at Infinity Innovators, where we were in the same team. He is highly passionate and enthusiastic, especially about machine learning. His skills in React Native and AWS serverless backend stood out.\",\n        avatar: \"M\",\n        rating: 5\n      },\n      {\n        name: \"Sarah Johnson\",\n        title: \"Project Manager\",\n        company: \"Tech Solutions Inc\",\n        content: \"Chanaka delivered an exceptional mobile application that exceeded our expectations. His attention to detail, technical expertise, and ability to understand our requirements made the entire development process smooth and efficient.\",\n        avatar: \"S\",\n        rating: 5\n      }\n    ];\n\n    seedTestimonials.forEach(testimonial => {\n      this.createTestimonial(testimonial);\n    });\n  }\n\n  // Projects\n  async getAllProjects(): Promise<Project[]> {\n    return Array.from(this.projects.values()).sort((a, b) => (b.featured || 0) - (a.featured || 0));\n  }\n\n  async getFeaturedProjects(): Promise<Project[]> {\n    return Array.from(this.projects.values()).filter(p => p.featured === 1);\n  }\n\n  async getProjectById(id: number): Promise<Project | undefined> {\n    return this.projects.get(id);\n  }\n\n  async createProject(insertProject: InsertProject): Promise<Project> {\n    const id = this.currentProjectId++;\n    const project: Project = {\n      ...insertProject,\n      id,\n      createdAt: new Date(),\n      githubUrl: insertProject.githubUrl || null,\n      liveUrl: insertProject.liveUrl || null,\n      featured: insertProject.featured || 0,\n      category: insertProject.category || \"full-stack\"\n    };\n    this.projects.set(id, project);\n    return project;\n  }\n\n  async updateProject(id: number, updateData: Partial<InsertProject>): Promise<Project | undefined> {\n    const existingProject = this.projects.get(id);\n    if (!existingProject) {\n      return undefined;\n    }\n    \n    const updatedProject: Project = {\n      ...existingProject,\n      ...updateData,\n      id, // Ensure ID doesn't change\n      createdAt: existingProject.createdAt, // Preserve original creation date\n      githubUrl: updateData.githubUrl !== undefined ? updateData.githubUrl || null : existingProject.githubUrl,\n      liveUrl: updateData.liveUrl !== undefined ? updateData.liveUrl || null : existingProject.liveUrl,\n      featured: updateData.featured !== undefined ? updateData.featured : existingProject.featured,\n      category: updateData.category || existingProject.category\n    };\n    \n    this.projects.set(id, updatedProject);\n    return updatedProject;\n  }\n\n  async deleteProject(id: number): Promise<boolean> {\n    return this.projects.delete(id);\n  }\n\n  // Experiences\n  async getAllExperiences(): Promise<Experience[]> {\n    return Array.from(this.experiences.values()).sort((a, b) => {\n      // Sort by current first, then by start date desc\n      if ((a.current || 0) !== (b.current || 0)) {\n        return (b.current || 0) - (a.current || 0);\n      }\n      return new Date(b.startDate).getTime() - new Date(a.startDate).getTime();\n    });\n  }\n\n  async createExperience(insertExperience: InsertExperience): Promise<Experience> {\n    const id = this.currentExperienceId++;\n    const experience: Experience = {\n      ...insertExperience,\n      id,\n      createdAt: new Date(),\n      current: insertExperience.current || 0,\n      endDate: insertExperience.endDate || null\n    };\n    this.experiences.set(id, experience);\n    return experience;\n  }\n\n  // Contacts\n  async getAllContacts(): Promise<Contact[]> {\n    return Array.from(this.contacts.values()).sort((a, b) => \n      b.createdAt!.getTime() - a.createdAt!.getTime()\n    );\n  }\n\n  async createContact(insertContact: InsertContact): Promise<Contact> {\n    const id = this.currentContactId++;\n    const contact: Contact = {\n      ...insertContact,\n      id,\n      createdAt: new Date(),\n      projectType: insertContact.projectType || null,\n      budgetRange: insertContact.budgetRange || null\n    };\n    this.contacts.set(id, contact);\n    return contact;\n  }\n\n  // Testimonials\n  async getAllTestimonials(): Promise<Testimonial[]> {\n    return Array.from(this.testimonials.values()).sort((a, b) => \n      b.createdAt!.getTime() - a.createdAt!.getTime()\n    );\n  }\n\n  async createTestimonial(insertTestimonial: InsertTestimonial): Promise<Testimonial> {\n    const id = this.currentTestimonialId++;\n    const testimonial: Testimonial = {\n      ...insertTestimonial,\n      id,\n      createdAt: new Date(),\n      avatar: insertTestimonial.avatar || null,\n      facebookId: insertTestimonial.facebookId || null,\n      rating: insertTestimonial.rating || 5\n    };\n    this.testimonials.set(id, testimonial);\n    return testimonial;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":13562},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const projects = pgTable(\"projects\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  image: text(\"image\").notNull(),\n  technologies: jsonb(\"technologies\").notNull(),\n  githubUrl: text(\"github_url\"),\n  liveUrl: text(\"live_url\"),\n  featured: integer(\"featured\").default(0),\n  category: text(\"category\").notNull().default(\"full-stack\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const experiences = pgTable(\"experiences\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  company: text(\"company\").notNull(),\n  description: text(\"description\").notNull(),\n  technologies: jsonb(\"technologies\").notNull(),\n  startDate: text(\"start_date\").notNull(),\n  endDate: text(\"end_date\"),\n  current: integer(\"current\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const contacts = pgTable(\"contacts\", {\n  id: serial(\"id\").primaryKey(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull(),\n  projectType: text(\"project_type\"),\n  budgetRange: text(\"budget_range\"),\n  message: text(\"message\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const testimonials = pgTable(\"testimonials\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  title: text(\"title\").notNull(),\n  company: text(\"company\").notNull(),\n  content: text(\"content\").notNull(),\n  avatar: text(\"avatar\"),\n  facebookId: text(\"facebook_id\"),\n  rating: integer(\"rating\").default(5),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertProjectSchema = createInsertSchema(projects).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertExperienceSchema = createInsertSchema(experiences).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertContactSchema = createInsertSchema(contacts).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTestimonialSchema = createInsertSchema(testimonials).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type Project = typeof projects.$inferSelect;\nexport type Experience = typeof experiences.$inferSelect;\nexport type Contact = typeof contacts.$inferSelect;\nexport type Testimonial = typeof testimonials.$inferSelect;\n\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\nexport type InsertExperience = z.infer<typeof insertExperienceSchema>;\nexport type InsertContact = z.infer<typeof insertContactSchema>;\nexport type InsertTestimonial = z.infer<typeof insertTestimonialSchema>;\n","size_bytes":2742},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport Home from \"@/pages/home\";\nimport AdminLogin from \"@/pages/admin-login\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/admin\" component={AdminLogin} />\n      <Route path=\"/admin/dashboard\" component={AdminDashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1033},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(248, 10%, 98%);\n  --foreground: hsl(240, 10%, 9%);\n  --muted: hsl(248, 10%, 95%);\n  --muted-foreground: hsl(240, 5%, 45%);\n  --popover: hsl(248, 10%, 98%);\n  --popover-foreground: hsl(240, 10%, 9%);\n  --card: hsl(248, 10%, 98%);\n  --card-foreground: hsl(240, 10%, 9%);\n  --border: hsl(240, 6%, 90%);\n  --input: hsl(240, 6%, 90%);\n  --primary: hsl(262, 83%, 58%);\n  --primary-foreground: hsl(248, 19%, 97%);\n  --secondary: hsl(248, 10%, 95%);\n  --secondary-foreground: hsl(240, 6%, 10%);\n  --accent: hsl(248, 10%, 95%);\n  --accent-foreground: hsl(240, 6%, 10%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 10%, 9%);\n  --radius: 0.5rem;\n  \n  /* Custom portfolio colors */\n  --glass-light: hsla(248, 10%, 98%, 0.1);\n  --glass-dark: hsla(240, 10%, 9%, 0.1);\n  --gradient-primary: linear-gradient(135deg, hsl(262, 83%, 58%), hsl(285, 85%, 60%));\n  --gradient-secondary: linear-gradient(135deg, hsl(196, 100%, 55%), hsl(170, 100%, 58%));\n  --gradient-accent: linear-gradient(135deg, hsl(45, 93%, 58%), hsl(20, 90%, 58%));\n}\n\n.dark {\n  --background: hsl(240, 10%, 4%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 4%, 16%);\n  --muted-foreground: hsl(240, 5%, 65%);\n  --popover: hsl(240, 10%, 4%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 4%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 4%, 16%);\n  --input: hsl(240, 4%, 16%);\n  --primary: hsl(262, 83%, 58%);\n  --primary-foreground: hsl(248, 19%, 97%);\n  --secondary: hsl(240, 4%, 16%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 4%, 16%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 5%, 84%);\n  \n  /* Custom portfolio colors for dark mode */\n  --glass-light: hsla(0, 0%, 98%, 0.1);\n  --glass-dark: hsla(240, 10%, 9%, 0.1);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground antialiased;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  }\n  \n  html {\n    scroll-behavior: smooth;\n  }\n}\n\n@layer utilities {\n  .glass-effect {\n    @apply backdrop-blur-md bg-white/10 dark:bg-black/10 border border-white/20 dark:border-gray-700/20;\n  }\n  \n  .glass-effect-strong {\n    @apply backdrop-blur-xl bg-white/20 dark:bg-black/20 border border-white/30 dark:border-gray-600/30;\n  }\n  \n  .gradient-text {\n    @apply bg-gradient-to-r from-indigo-500 to-purple-500 bg-clip-text text-transparent;\n  }\n  \n  .gradient-bg {\n    background: var(--gradient-primary);\n  }\n  \n  .gradient-bg-secondary {\n    background: var(--gradient-secondary);\n  }\n  \n  .gradient-bg-accent {\n    background: var(--gradient-accent);\n  }\n  \n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n  \n  .animate-pulse-slow {\n    animation: pulse 3s infinite;\n  }\n  \n  .animate-bounce-slow {\n    animation: bounce 2s infinite;\n  }\n  \n  .animate-gradient {\n    animation: gradient 8s ease infinite;\n    background-size: 400% 400%;\n  }\n  \n  .animate-slide-up {\n    animation: slideUp 0.6s ease-out;\n  }\n  \n  .animate-slide-down {\n    animation: slideDown 0.6s ease-out;\n  }\n  \n  /* Horizontal scrolling enhancements */\n  .horizontal-scroll {\n    scrollbar-width: thin;\n    scrollbar-color: rgba(156, 163, 175, 0.5) transparent;\n  }\n  \n  .horizontal-scroll::-webkit-scrollbar {\n    height: 8px;\n  }\n  \n  .horizontal-scroll::-webkit-scrollbar-track {\n    background: transparent;\n    border-radius: 10px;\n  }\n  \n  .horizontal-scroll::-webkit-scrollbar-thumb {\n    background: rgba(156, 163, 175, 0.5);\n    border-radius: 10px;\n    transition: background 0.3s ease;\n  }\n  \n  .horizontal-scroll::-webkit-scrollbar-thumb:hover {\n    background: rgba(156, 163, 175, 0.7);\n  }\n  \n  .dark .horizontal-scroll::-webkit-scrollbar-thumb {\n    background: rgba(75, 85, 99, 0.5);\n  }\n  \n  .dark .horizontal-scroll::-webkit-scrollbar-thumb:hover {\n    background: rgba(75, 85, 99, 0.7);\n  }\n  \n  /* Category header styling */\n  .category-header {\n    position: relative;\n    display: flex;\n    align-items: center;\n    margin-bottom: 1.5rem;\n  }\n  \n  .category-header::after {\n    content: '';\n    flex-grow: 1;\n    height: 2px;\n    margin-left: 1rem;\n    background: linear-gradient(90deg, rgba(156, 163, 175, 0.3) 0%, transparent 100%);\n  }\n  \n  .dark .category-header::after {\n    background: linear-gradient(90deg, rgba(75, 85, 99, 0.3) 0%, transparent 100%);\n  }\n  \n  .animate-fade-in {\n    animation: fadeIn 0.8s ease-out;\n  }\n  \n  .animate-scale-in {\n    animation: scaleIn 0.5s ease-out;\n  }\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-20px); }\n}\n\n@keyframes gradient {\n  0% { background-position: 0% 50%; }\n  50% { background-position: 100% 50%; }\n  100% { background-position: 0% 50%; }\n}\n\n@keyframes slideUp {\n  0% { transform: translateY(100px); opacity: 0; }\n  100% { transform: translateY(0); opacity: 1; }\n}\n\n@keyframes slideDown {\n  0% { transform: translateY(-100px); opacity: 0; }\n  100% { transform: translateY(0); opacity: 1; }\n}\n\n@keyframes fadeIn {\n  0% { opacity: 0; }\n  100% { opacity: 1; }\n}\n\n@keyframes scaleIn {\n  0% { transform: scale(0.9); opacity: 0; }\n  100% { transform: scale(1); opacity: 1; }\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  @apply bg-muted;\n}\n\n::-webkit-scrollbar-thumb {\n  @apply bg-primary rounded-full;\n  opacity: 0.5;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  @apply bg-primary;\n  opacity: 0.7;\n}\n\n/* Additional glass effects */\n.glass-effect {\n  background: rgba(255, 255, 255, 0.05);\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.glass-effect-strong {\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(15px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n/* Dark mode glass effects */\n.dark .glass-effect {\n  background: rgba(0, 0, 0, 0.05);\n  border: 1px solid rgba(255, 255, 255, 0.05);\n}\n\n.dark .glass-effect-strong {\n  background: rgba(0, 0, 0, 0.1);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n}\n","size_bytes":6211},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/about-section.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { GlassCard } from \"./ui/glass-card\";\nimport { \n  Code, \n  Brain, \n  Rocket, \n  Users, \n  Clock,\n  Target,\n  TrendingUp,\n  Award\n} from \"lucide-react\";\nimport { \n  BarChart, \n  Bar, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell\n} from \"recharts\";\n\nexport function AboutSection() {\n  const stats = [\n    { value: \"15+\", label: \"Projects Completed\", color: \"from-indigo-500 to-purple-500\", icon: <Code className=\"w-6 h-6\" /> },\n    { value: \"3+\", label: \"Years Experience\", color: \"from-purple-500 to-pink-500\", icon: <Clock className=\"w-6 h-6\" /> },\n    { value: \"100%\", label: \"Client Satisfaction\", color: \"from-cyan-500 to-emerald-500\", icon: <Users className=\"w-6 h-6\" /> },\n    { value: \"24/7\", label: \"Available\", color: \"from-emerald-500 to-teal-500\", icon: <Target className=\"w-6 h-6\" /> },\n  ];\n\n  const skillsData = [\n    { name: \"React/Next.js\", level: 95, color: \"#61DAFB\" },\n    { name: \"Python\", level: 90, color: \"#3776AB\" },\n    { name: \"AI/ML\", level: 85, color: \"#FF6B6B\" },\n    { name: \"AWS\", level: 80, color: \"#FF9900\" },\n    { name: \"Node.js\", level: 88, color: \"#339933\" },\n    { name: \"MongoDB\", level: 82, color: \"#47A248\" },\n  ];\n\n  const projectStatsData = [\n    { name: \"AI/ML Projects\", value: 6, color: \"#8B5CF6\" },\n    { name: \"Web Applications\", value: 8, color: \"#06B6D4\" },\n    { name: \"Mobile Apps\", value: 4, color: \"#F59E0B\" },\n    { name: \"Consulting\", value: 3, color: \"#EF4444\" },\n  ];\n\n  const techStack = [\n    { name: \"React.js\", icon: \"⚛️\", color: \"from-cyan-500 to-blue-500\" },\n    { name: \"Next.js\", icon: \"▲\", color: \"from-gray-800 to-gray-600\" },\n    { name: \"Python\", icon: \"🐍\", color: \"from-green-500 to-yellow-500\" },\n    { name: \"Vue.js\", icon: \"V\", color: \"from-green-600 to-emerald-600\" },\n    { name: \"AWS\", icon: \"☁️\", color: \"from-orange-500 to-red-500\" },\n    { name: \"MongoDB\", icon: \"🍃\", color: \"from-green-600 to-lime-600\" },\n  ];\n\n  const values = [\n    {\n      icon: <Brain className=\"w-6 h-6\" />,\n      title: \"Innovation First\",\n      description: \"Pushing boundaries and exploring new possibilities in every project\",\n      color: \"from-indigo-500 to-purple-500\"\n    },\n    {\n      icon: <Target className=\"w-6 h-6\" />,\n      title: \"Excellence\",\n      description: \"Delivering exceptional quality and performance in everything I create\",\n      color: \"from-purple-500 to-pink-500\"\n    },\n    {\n      icon: <Users className=\"w-6 h-6\" />,\n      title: \"Client Focus\",\n      description: \"Understanding and exceeding client expectations through personalized solutions\",\n      color: \"from-cyan-500 to-emerald-500\"\n    },\n    {\n      icon: <Clock className=\"w-6 h-6\" />,\n      title: \"Reliability\",\n      description: \"Building robust and secure solutions that stand the test of time\",\n      color: \"from-emerald-500 to-teal-500\"\n    },\n    {\n      icon: <Rocket className=\"w-6 h-6\" />,\n      title: \"Agility\",\n      description: \"Adapting quickly to change and delivering results with speed and precision\",\n      color: \"from-orange-500 to-red-500\"\n    },\n    {\n      icon: <Code className=\"w-6 h-6\" />,\n      title: \"Impact\",\n      description: \"Creating meaningful solutions that make a real difference in the world\",\n      color: \"from-pink-500 to-rose-500\"\n    }\n  ];\n\n  return (\n    <section id=\"about\" className=\"py-20 px-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Section Header */}\n        <motion.div\n          initial={{ opacity: 0, y: 50 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          viewport={{ once: true }}\n          className=\"text-center mb-16\"\n        >\n          <h2 className=\"text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-4\">\n            About <span className=\"gradient-text\">Me</span>\n          </h2>\n          <p className=\"text-xl text-gray-600 dark:text-gray-400 max-w-2xl mx-auto\">\n            Committed to effortless client collaboration and transparency\n          </p>\n        </motion.div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-16\">\n          {stats.map((stat, index) => (\n            <motion.div\n              key={stat.label}\n              initial={{ opacity: 0, y: 30 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: index * 0.1 }}\n              viewport={{ once: true }}\n            >\n              <GlassCard className=\"p-6 text-center group\" hover>\n                <div className={`w-16 h-16 mx-auto mb-4 rounded-2xl bg-gradient-to-r ${stat.color} flex items-center justify-center text-white group-hover:scale-110 transition-transform duration-300`}>\n                  {stat.icon}\n                </div>\n                <div className={`text-3xl font-bold bg-gradient-to-r ${stat.color} bg-clip-text text-transparent mb-2`}>\n                  {stat.value}\n                </div>\n                <div className=\"text-gray-700 dark:text-gray-300 font-medium\">{stat.label}</div>\n              </GlassCard>\n            </motion.div>\n          ))}\n        </div>\n\n        {/* Tech Stack */}\n        <div className=\"mb-16\">\n          <motion.h3\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n            viewport={{ once: true }}\n            className=\"text-3xl font-bold text-gray-900 dark:text-white mb-8 text-center\"\n          >\n            My Tech Stack\n          </motion.h3>\n          <div className=\"grid grid-cols-3 md:grid-cols-6 gap-6\">\n            {techStack.map((tech, index) => (\n              <motion.div\n                key={tech.name}\n                initial={{ opacity: 0, scale: 0.8 }}\n                whileInView={{ opacity: 1, scale: 1 }}\n                transition={{ duration: 0.6, delay: index * 0.1 }}\n                viewport={{ once: true }}\n              >\n                <GlassCard className=\"p-6 text-center\" hover>\n                  <div className={`text-4xl mb-3 bg-gradient-to-r ${tech.color} bg-clip-text text-transparent`}>\n                    {tech.icon}\n                  </div>\n                  <p className=\"text-gray-700 dark:text-gray-300 font-medium\">{tech.name}</p>\n                </GlassCard>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n\n        {/* About Content */}\n        <div className=\"mb-16\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            viewport={{ once: true }}\n            className=\"text-center mb-12\"\n          >\n            <GlassCard className=\"p-8 max-w-4xl mx-auto\">\n              <div className=\"mb-8\">\n                <div className=\"w-24 h-24 mx-auto mb-6 gradient-bg rounded-full p-1\">\n                  <div className=\"w-full h-full bg-gray-200 dark:bg-gray-700 rounded-full flex items-center justify-center\">\n                    <span className=\"text-2xl font-bold text-gray-600 dark:text-gray-400\">CP</span>\n                  </div>\n                </div>\n                <h3 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-4\">\n                  Building intelligent solutions with code\n                </h3>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 text-left\">\n                <div>\n                  <p className=\"text-lg text-gray-600 dark:text-gray-400 mb-6\">\n                    I constantly try to improve my skills and stay updated with the latest technologies.\n                    Available to connect seamlessly across any time zone, I'm committed to delivering\n                    exceptional results through effortless client collaboration and transparency.\n                  </p>\n                  <div className=\"flex flex-wrap gap-3\">\n                    <span className=\"px-4 py-2 bg-gradient-to-r from-indigo-500/20 to-purple-500/20 text-indigo-700 dark:text-indigo-300 rounded-full font-medium text-sm\">\n                      AI/ML Enthusiast\n                    </span>\n                    <span className=\"px-4 py-2 bg-gradient-to-r from-purple-500/20 to-pink-500/20 text-purple-700 dark:text-purple-300 rounded-full font-medium text-sm\">\n                      Software Developer\n                    </span>\n                  </div>\n                </div>\n                \n                <div>\n                  <p className=\"text-lg text-gray-600 dark:text-gray-400 mb-6\">\n                    Transform. Develop. Achieve. As a motivated individual with a strong interest in\n                    AI/ML & Software developments, I bridge the gap between human needs and machine capabilities.\n                  </p>\n                  <div className=\"flex flex-wrap gap-3\">\n                    <span className=\"px-4 py-2 bg-gradient-to-r from-cyan-500/20 to-emerald-500/20 text-cyan-700 dark:text-cyan-300 rounded-full font-medium text-sm\">\n                      Problem Solver\n                    </span>\n                    <span className=\"px-4 py-2 bg-gradient-to-r from-orange-500/20 to-red-500/20 text-orange-700 dark:text-orange-300 rounded-full font-medium text-sm\">\n                      Innovation Focused\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </GlassCard>\n          </motion.div>\n        </div>\n\n        {/* Skills and Project Stats Charts */}\n        <div className=\"mb-16\">\n          <motion.h3\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n            viewport={{ once: true }}\n            className=\"text-3xl font-bold text-gray-900 dark:text-white mb-8 text-center\"\n          >\n            Skills & Project Statistics\n          </motion.h3>\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n            {/* Skills Bar Chart */}\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              whileInView={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.8 }}\n              viewport={{ once: true }}\n            >\n              <GlassCard className=\"p-6\" hover>\n                <div className=\"flex items-center mb-6\">\n                  <div className=\"w-10 h-10 bg-gradient-to-r from-indigo-500 to-purple-500 rounded-lg flex items-center justify-center mr-3\">\n                    <TrendingUp className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <h4 className=\"text-xl font-bold text-gray-900 dark:text-white\">\n                    Technical Skills\n                  </h4>\n                </div>\n                <div className=\"h-80\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <BarChart data={skillsData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n                      <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" strokeOpacity={0.3} />\n                      <XAxis \n                        dataKey=\"name\" \n                        stroke=\"#6B7280\" \n                        fontSize={12}\n                        angle={-45}\n                        textAnchor=\"end\"\n                        height={80}\n                      />\n                      <YAxis stroke=\"#6B7280\" fontSize={12} />\n                      <Tooltip \n                        contentStyle={{ \n                          backgroundColor: 'rgba(17, 24, 39, 0.9)', \n                          border: 'none', \n                          borderRadius: '12px',\n                          color: 'white'\n                        }}\n                      />\n                      <Bar dataKey=\"level\" fill=\"#8B5CF6\" radius={[4, 4, 0, 0]} />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </div>\n              </GlassCard>\n            </motion.div>\n\n            {/* Project Stats Pie Chart */}\n            <motion.div\n              initial={{ opacity: 0, x: 50 }}\n              whileInView={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.8 }}\n              viewport={{ once: true }}\n            >\n              <GlassCard className=\"p-6\" hover>\n                <div className=\"flex items-center mb-6\">\n                  <div className=\"w-10 h-10 bg-gradient-to-r from-cyan-500 to-emerald-500 rounded-lg flex items-center justify-center mr-3\">\n                    <Award className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <h4 className=\"text-xl font-bold text-gray-900 dark:text-white\">\n                    Project Distribution\n                  </h4>\n                </div>\n                <div className=\"h-80\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <PieChart>\n                      <Pie\n                        data={projectStatsData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        labelLine={false}\n                        label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                        outerRadius={80}\n                        fill=\"#8884d8\"\n                        dataKey=\"value\"\n                      >\n                        {projectStatsData.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={entry.color} />\n                        ))}\n                      </Pie>\n                      <Tooltip \n                        contentStyle={{ \n                          backgroundColor: 'rgba(17, 24, 39, 0.9)', \n                          border: 'none', \n                          borderRadius: '12px',\n                          color: 'white'\n                        }}\n                      />\n                    </PieChart>\n                  </ResponsiveContainer>\n                </div>\n                <div className=\"mt-4 grid grid-cols-2 gap-2\">\n                  {projectStatsData.map((item, index) => (\n                    <div key={index} className=\"flex items-center\">\n                      <div \n                        className=\"w-3 h-3 rounded-full mr-2\" \n                        style={{ backgroundColor: item.color }}\n                      />\n                      <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        {item.name}: {item.value}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </GlassCard>\n            </motion.div>\n          </div>\n        </div>\n\n        {/* Core Values */}\n        <div>\n          <motion.h3\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n            viewport={{ once: true }}\n            className=\"text-3xl font-bold text-gray-900 dark:text-white mb-8 text-center\"\n          >\n            My Core Values\n          </motion.h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {values.map((value, index) => (\n              <motion.div\n                key={value.title}\n                initial={{ opacity: 0, y: 30 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.6, delay: index * 0.1 }}\n                viewport={{ once: true }}\n              >\n                <GlassCard className=\"p-6 h-full\" hover>\n                  <div className={`w-12 h-12 rounded-xl bg-gradient-to-r ${value.color} flex items-center justify-center text-white mb-4`}>\n                    {value.icon}\n                  </div>\n                  <h4 className=\"text-xl font-bold text-gray-900 dark:text-white mb-3\">\n                    {value.title}\n                  </h4>\n                  <p className=\"text-gray-600 dark:text-gray-400\">\n                    {value.description}\n                  </p>\n                </GlassCard>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":16096},"client/src/components/animated-background.tsx":{"content":"import { useEffect, useRef } from \"react\";\n\nexport function AnimatedBackground() {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n\n    resizeCanvas();\n    window.addEventListener(\"resize\", resizeCanvas);\n\n    // Wave animation variables\n    let time = 0;\n    const waves = [\n      { amplitude: 30, frequency: 0.02, speed: 0.01, color: \"rgba(99, 102, 241, 0.1)\" },\n      { amplitude: 40, frequency: 0.015, speed: 0.015, color: \"rgba(168, 85, 247, 0.08)\" },\n      { amplitude: 25, frequency: 0.025, speed: 0.008, color: \"rgba(59, 130, 246, 0.06)\" },\n    ];\n\n    // Floating particles\n    const particles: Array<{\n      x: number;\n      y: number;\n      size: number;\n      speedX: number;\n      speedY: number;\n      color: string;\n      opacity: number;\n    }> = [];\n\n    const colors = [\n      \"rgba(99, 102, 241, 0.15)\",\n      \"rgba(168, 85, 247, 0.12)\",\n      \"rgba(236, 72, 153, 0.1)\",\n      \"rgba(59, 130, 246, 0.13)\",\n      \"rgba(16, 185, 129, 0.11)\",\n    ];\n\n    // Create particles\n    for (let i = 0; i < 80; i++) {\n      particles.push({\n        x: Math.random() * canvas.width,\n        y: Math.random() * canvas.height,\n        size: Math.random() * 3 + 1,\n        speedX: (Math.random() - 0.5) * 0.8,\n        speedY: (Math.random() - 0.5) * 0.8,\n        color: colors[Math.floor(Math.random() * colors.length)],\n        opacity: Math.random() * 0.5 + 0.2,\n      });\n    }\n\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Draw animated waves\n      waves.forEach((wave, index) => {\n        ctx.beginPath();\n        ctx.moveTo(0, canvas.height / 2);\n        \n        for (let x = 0; x <= canvas.width; x += 2) {\n          const y = canvas.height / 2 + \n                   Math.sin(x * wave.frequency + time * wave.speed) * wave.amplitude +\n                   Math.sin(x * wave.frequency * 2 + time * wave.speed * 1.5) * (wave.amplitude * 0.5);\n          ctx.lineTo(x, y);\n        }\n        \n        ctx.lineTo(canvas.width, canvas.height);\n        ctx.lineTo(0, canvas.height);\n        ctx.closePath();\n        \n        ctx.fillStyle = wave.color;\n        ctx.fill();\n      });\n\n      // Draw and update particles\n      particles.forEach((particle, index) => {\n        particle.x += particle.speedX;\n        particle.y += particle.speedY;\n\n        // Bounce off edges\n        if (particle.x < 0 || particle.x > canvas.width) particle.speedX *= -1;\n        if (particle.y < 0 || particle.y > canvas.height) particle.speedY *= -1;\n\n        // Pulsing effect\n        particle.opacity = 0.3 + Math.sin(time * 0.02 + index * 0.1) * 0.2;\n\n        ctx.beginPath();\n        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n        ctx.fillStyle = particle.color.replace(/[\\d\\.]+\\)$/g, `${particle.opacity})`);\n        ctx.fill();\n      });\n\n      // Draw connecting lines between nearby particles\n      particles.forEach((particle, index) => {\n        particles.slice(index + 1, index + 6).forEach((otherParticle) => {\n          const dx = particle.x - otherParticle.x;\n          const dy = particle.y - otherParticle.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n\n          if (distance < 120) {\n            ctx.beginPath();\n            ctx.moveTo(particle.x, particle.y);\n            ctx.lineTo(otherParticle.x, otherParticle.y);\n            ctx.strokeStyle = `rgba(99, 102, 241, ${0.15 - distance / 800})`;\n            ctx.lineWidth = 0.5;\n            ctx.stroke();\n          }\n        });\n      });\n\n      time += 1;\n      requestAnimationFrame(animate);\n    };\n\n    animate();\n\n    return () => {\n      window.removeEventListener(\"resize\", resizeCanvas);\n    };\n  }, []);\n\n  return (\n    <>\n      <canvas\n        ref={canvasRef}\n        className=\"fixed inset-0 pointer-events-none\"\n        style={{ zIndex: 0 }}\n      />\n      \n      {/* Animated gradient background */}\n      <div className=\"fixed inset-0 bg-gradient-to-br from-indigo-500/20 via-purple-500/20 to-cyan-500/20 animate-gradient bg-[length:400%_400%]\" />\n      \n      {/* Flowing gradient orbs */}\n      <div className=\"fixed inset-0 opacity-40\">\n        <div className=\"absolute top-1/4 left-1/4 w-72 h-72 bg-gradient-to-r from-indigo-500/40 to-purple-500/40 rounded-full blur-3xl animate-float\" />\n        <div className=\"absolute bottom-1/4 right-1/4 w-96 h-96 bg-gradient-to-r from-cyan-500/40 to-emerald-500/40 rounded-full blur-3xl animate-float [animation-delay:2s]\" />\n        <div className=\"absolute top-1/2 left-1/2 w-64 h-64 bg-gradient-to-r from-purple-500/40 to-pink-500/40 rounded-full blur-3xl animate-float [animation-delay:4s]\" />\n        <div className=\"absolute top-3/4 left-1/3 w-80 h-80 bg-gradient-to-r from-orange-500/30 to-red-500/30 rounded-full blur-3xl animate-float [animation-delay:6s]\" />\n      </div>\n      \n      {/* Animated mesh gradient overlay */}\n      <div className=\"fixed inset-0 opacity-20\">\n        <div className=\"absolute inset-0 bg-gradient-to-tr from-blue-600/20 via-purple-600/20 to-pink-600/20 animate-gradient bg-[length:200%_200%]\" />\n        <div className=\"absolute inset-0 bg-gradient-to-bl from-green-600/20 via-blue-600/20 to-purple-600/20 animate-gradient bg-[length:200%_200%] [animation-delay:3s]\" />\n      </div>\n      \n      {/* Subtle noise texture */}\n      <div \n        className=\"fixed inset-0 opacity-5 pointer-events-none\"\n        style={{\n          backgroundImage: `url(\"data:image/svg+xml,%3Csvg viewBox='0 0 256 256' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.65' numOctaves='4' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E\")`,\n          backgroundSize: '256px 256px'\n        }}\n      />\n    </>\n  );\n}\n","size_bytes":6048},"client/src/components/contact-section.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { GlassCard } from \"./ui/glass-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Mail, Phone, MapPin, Copy, Check } from \"lucide-react\";\nimport { insertContactSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { InsertContact } from \"@shared/schema\";\n\nexport function ContactSection() {\n  const [emailCopied, setEmailCopied] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<InsertContact>({\n    resolver: zodResolver(insertContactSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      projectType: \"\",\n      budgetRange: \"\",\n      message: \"\",\n    },\n  });\n\n  const contactMutation = useMutation({\n    mutationFn: async (data: InsertContact) => {\n      const response = await apiRequest(\"POST\", \"/api/contact\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Message sent successfully!\",\n        description: \"Thank you for your message. I'll get back to you soon.\",\n      });\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/contacts\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to send message\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertContact) => {\n    contactMutation.mutate(data);\n  };\n\n  const copyEmail = async () => {\n    try {\n      await navigator.clipboard.writeText(\"chanaka@example.com\");\n      setEmailCopied(true);\n      toast({\n        title: \"Email copied to clipboard!\",\n        description: \"chanaka@example.com\",\n      });\n      setTimeout(() => setEmailCopied(false), 3000);\n    } catch (error) {\n      toast({\n        title: \"Failed to copy email\",\n        description: \"Please copy the email manually: chanaka@example.com\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <section id=\"contact\" className=\"py-20 px-6\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Section Header */}\n        <motion.div\n          initial={{ opacity: 0, y: 50 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          viewport={{ once: true }}\n          className=\"text-center mb-16\"\n        >\n          <h2 className=\"text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-4\">\n            Get In <span className=\"gradient-text\">Touch</span>\n          </h2>\n          <p className=\"text-xl text-gray-600 dark:text-gray-400 max-w-2xl mx-auto\">\n            Do you want to start a project together? Let's collaborate and create something amazing!\n          </p>\n        </motion.div>\n\n        {/* Contact Form */}\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.2 }}\n          viewport={{ once: true }}\n        >\n          <GlassCard className=\"p-8\">\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-700 dark:text-gray-300\">\n                          First Name *\n                        </FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            placeholder=\"John\"\n                            className=\"glass-effect border-0 focus:ring-2 focus:ring-indigo-500\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-700 dark:text-gray-300\">\n                          Last Name *\n                        </FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            placeholder=\"Doe\"\n                            className=\"glass-effect border-0 focus:ring-2 focus:ring-indigo-500\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-700 dark:text-gray-300\">\n                        Email *\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"email\"\n                          placeholder=\"john@example.com\"\n                          className=\"glass-effect border-0 focus:ring-2 focus:ring-indigo-500\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"projectType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-700 dark:text-gray-300\">\n                        Project Type\n                      </FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger className=\"glass-effect border-0 focus:ring-2 focus:ring-indigo-500\">\n                            <SelectValue placeholder=\"Select a project type\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"web\">Web Application</SelectItem>\n                          <SelectItem value=\"mobile\">Mobile Application</SelectItem>\n                          <SelectItem value=\"aiml\">AI/ML Solution</SelectItem>\n                          <SelectItem value=\"consulting\">Consulting</SelectItem>\n                          <SelectItem value=\"other\">Other</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"budgetRange\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-700 dark:text-gray-300\">\n                        Budget Range\n                      </FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger className=\"glass-effect border-0 focus:ring-2 focus:ring-indigo-500\">\n                            <SelectValue placeholder=\"Select budget range\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"5k-10k\">$5,000 - $10,000</SelectItem>\n                          <SelectItem value=\"10k-25k\">$10,000 - $25,000</SelectItem>\n                          <SelectItem value=\"25k-50k\">$25,000 - $50,000</SelectItem>\n                          <SelectItem value=\"50k+\">$50,000+</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"message\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-700 dark:text-gray-300\">\n                        Message *\n                      </FormLabel>\n                      <FormControl>\n                        <Textarea\n                          {...field}\n                          rows={5}\n                          placeholder=\"Tell me about your project...\"\n                          className=\"glass-effect border-0 focus:ring-2 focus:ring-indigo-500 resize-none\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex flex-col sm:flex-row gap-4\">\n                  <Button\n                    type=\"submit\"\n                    disabled={contactMutation.isPending}\n                    className=\"flex-1 gradient-bg text-white hover:shadow-xl transition-all duration-300\"\n                  >\n                    {contactMutation.isPending ? \"Sending...\" : \"Send Message\"}\n                  </Button>\n                  \n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={copyEmail}\n                    className=\"flex-1 glass-effect border-0 hover:glass-effect-strong transition-all duration-300\"\n                  >\n                    {emailCopied ? (\n                      <>\n                        <Check className=\"w-4 h-4 mr-2\" />\n                        Email Copied!\n                      </>\n                    ) : (\n                      <>\n                        <Copy className=\"w-4 h-4 mr-2\" />\n                        Copy My Email\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </GlassCard>\n        </motion.div>\n\n        {/* Contact Information */}\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.4 }}\n          viewport={{ once: true }}\n          className=\"mt-16 grid grid-cols-1 md:grid-cols-3 gap-8\"\n        >\n          <GlassCard className=\"p-6 text-center\" hover>\n            <div className=\"w-12 h-12 gradient-bg rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Mail className=\"w-6 h-6 text-white\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">Email</h3>\n            <p className=\"text-gray-600 dark:text-gray-400\">chanaka@example.com</p>\n          </GlassCard>\n\n          <GlassCard className=\"p-6 text-center\" hover>\n            <div className=\"w-12 h-12 gradient-bg-secondary rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Phone className=\"w-6 h-6 text-white\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">Phone</h3>\n            <p className=\"text-gray-600 dark:text-gray-400\">+94 76 XXX XXXX</p>\n          </GlassCard>\n\n          <GlassCard className=\"p-6 text-center\" hover>\n            <div className=\"w-12 h-12 gradient-bg-accent rounded-full flex items-center justify-center mx-auto mb-4\">\n              <MapPin className=\"w-6 h-6 text-white\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">Location</h3>\n            <p className=\"text-gray-600 dark:text-gray-400\">Colombo, Sri Lanka</p>\n          </GlassCard>\n        </motion.div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":12603},"client/src/components/experience-section.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { GlassCard } from \"./ui/glass-card\";\nimport { Button } from \"./ui/button\";\nimport { Input } from \"./ui/input\";\nimport { Label } from \"./ui/label\";\nimport { Textarea } from \"./ui/textarea\";\nimport { Briefcase, User, Star, Loader2, Plus, MessageSquare, StarIcon, Facebook } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Experience, Testimonial } from \"@shared/schema\";\n\ninterface NewReview {\n  name: string;\n  title: string;\n  company: string;\n  content: string;\n  facebookId: string;\n  rating: number;\n}\n\nexport function ExperienceSection() {\n  const [showReviewForm, setShowReviewForm] = useState(false);\n  const [newReview, setNewReview] = useState<NewReview>({\n    name: '',\n    title: '',\n    company: '',\n    content: '',\n    facebookId: '',\n    rating: 5\n  });\n  const { toast } = useToast();\n\n  const { data: experiences, isLoading: experiencesLoading } = useQuery<Experience[]>({\n    queryKey: [\"/api/experiences\"],\n  });\n\n  const { data: testimonials, isLoading: testimonialsLoading } = useQuery<Testimonial[]>({\n    queryKey: [\"/api/testimonials\"],\n  });\n\n  // Create review mutation\n  const createReviewMutation = useMutation({\n    mutationFn: async (reviewData: NewReview) => {\n      const response = await apiRequest('POST', '/api/testimonials', reviewData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Your review has been submitted successfully!',\n      });\n      \n      // Reset form\n      setNewReview({\n        name: '',\n        title: '',\n        company: '',\n        content: '',\n        facebookId: '',\n        rating: 5\n      });\n      setShowReviewForm(false);\n      \n      // Invalidate and refetch testimonials\n      queryClient.invalidateQueries({ queryKey: ['/api/testimonials'] });\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to submit review. Please try again.',\n        variant: 'destructive',\n      });\n    }\n  });\n\n  const handleSubmitReview = () => {\n    if (!newReview.name || !newReview.content) {\n      toast({\n        title: 'Error',\n        description: 'Please fill in all required fields.',\n        variant: 'destructive',\n      });\n      return;\n    }\n    createReviewMutation.mutate(newReview);\n  };\n\n  if (experiencesLoading || testimonialsLoading) {\n    return (\n      <section className=\"py-20 px-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex justify-center items-center min-h-[400px]\">\n            <Loader2 className=\"w-8 h-8 animate-spin text-indigo-600\" />\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"py-20 px-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Work Experience */}\n        <div className=\"mb-20\">\n          <motion.h2\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n            viewport={{ once: true }}\n            className=\"text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-16 text-center\"\n          >\n            Work <span className=\"gradient-text\">Experience</span>\n          </motion.h2>\n\n          <div className=\"space-y-8\">\n            {experiences?.map((experience, index) => (\n              <motion.div\n                key={experience.id}\n                initial={{ opacity: 0, y: 30 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.6, delay: index * 0.2 }}\n                viewport={{ once: true }}\n              >\n                <GlassCard className=\"p-8\" hover>\n                  <div className=\"flex items-start space-x-6\">\n                    <div className=\"flex-shrink-0\">\n                      <div className=\"w-16 h-16 gradient-bg rounded-2xl flex items-center justify-center shadow-lg\">\n                        <Briefcase className=\"w-8 h-8 text-white\" />\n                      </div>\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n                        {experience.title}\n                      </h3>\n                      <p className=\"text-lg text-indigo-600 dark:text-indigo-400 mb-1\">\n                        {experience.company}\n                      </p>\n                      <p className=\"text-sm text-gray-500 dark:text-gray-400 mb-4\">\n                        {experience.startDate} - {experience.endDate || \"Present\"}\n                        {experience.current === 1 && (\n                          <span className=\"ml-2 px-2 py-1 bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 rounded-full text-xs\">\n                            Current\n                          </span>\n                        )}\n                      </p>\n                      <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n                        {experience.description}\n                      </p>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {Array.isArray(experience.technologies) ? \n                          experience.technologies.map((tech, techIndex) => (\n                            <span\n                              key={techIndex}\n                              className=\"px-3 py-1 bg-gradient-to-r from-indigo-500/20 to-purple-500/20 text-indigo-700 dark:text-indigo-300 rounded-full text-sm\"\n                            >\n                              {tech}\n                            </span>\n                          )) : null\n                        }\n                      </div>\n                    </div>\n                  </div>\n                </GlassCard>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n\n        {/* Testimonials */}\n        <div>\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n            viewport={{ once: true }}\n            className=\"flex items-center justify-between mb-16\"\n          >\n            <h2 className=\"text-4xl md:text-5xl font-bold text-gray-900 dark:text-white text-center flex-1\">\n              Client <span className=\"gradient-text\">Testimonials</span>\n            </h2>\n            <Button\n              onClick={() => setShowReviewForm(true)}\n              className=\"ml-6 bg-gradient-to-r from-indigo-500 to-purple-500 hover:from-indigo-600 hover:to-purple-600 text-white shadow-lg\"\n            >\n              <MessageSquare className=\"w-4 h-4 mr-2\" />\n              Leave a Review\n            </Button>\n          </motion.div>\n\n          {/* Horizontal Scrolling Testimonials */}\n          <div className=\"overflow-x-auto horizontal-scroll pb-6\">\n            <div className=\"flex space-x-6 w-max px-1\">\n              {testimonials?.map((testimonial, index) => (\n                <motion.div\n                  key={testimonial.id}\n                  initial={{ opacity: 0, x: 50 }}\n                  whileInView={{ opacity: 1, x: 0 }}\n                  transition={{ duration: 0.6, delay: index * 0.1 }}\n                  viewport={{ once: true }}\n                  className=\"flex-shrink-0\"\n                >\n                  <GlassCard className=\"p-8 w-96 h-full\" hover>\n                    <div className=\"flex items-center mb-6\">\n                      <div className=\"w-14 h-14 gradient-bg rounded-full flex items-center justify-center mr-4\">\n                        {testimonial.avatar ? (\n                          <img\n                            src={testimonial.avatar}\n                            alt={testimonial.name}\n                            className=\"w-full h-full rounded-full object-cover\"\n                          />\n                        ) : (\n                          <span className=\"text-white font-bold text-lg\">\n                            {testimonial.name.charAt(0)}\n                          </span>\n                        )}\n                      </div>\n                      <div>\n                        <h4 className=\"text-lg font-bold text-gray-900 dark:text-white\">\n                          {testimonial.name}\n                        </h4>\n                        <p className=\"text-gray-600 dark:text-gray-400\">\n                          {testimonial.title} at {testimonial.company}\n                        </p>\n                        {testimonial.facebookId && (\n                          <div className=\"flex items-center mt-1\">\n                            <Facebook className=\"w-3 h-3 text-blue-600 mr-1\" />\n                            <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n                              {testimonial.facebookId}\n                            </span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    \n                    <p className=\"text-gray-700 dark:text-gray-300 italic mb-4\">\n                      \"{testimonial.content}\"\n                    </p>\n                    \n                    <div className=\"flex items-center\">\n                      <div className=\"flex space-x-1 text-yellow-500\">\n                        {Array.from({ length: testimonial.rating || 5 }).map((_, i) => (\n                          <Star key={i} className=\"w-4 h-4 fill-current\" />\n                        ))}\n                      </div>\n                    </div>\n                  </GlassCard>\n                </motion.div>\n              ))}\n            </div>\n          </div>\n\n          {/* Scroll Indicator */}\n          {testimonials && testimonials.length > 1 && (\n            <div className=\"flex justify-center mt-4\">\n              <div className=\"flex items-center space-x-2 text-gray-400 dark:text-gray-600 text-sm\">\n                <span>← Scroll to see more reviews →</span>\n              </div>\n            </div>\n          )}\n\n          {/* Review Form Modal */}\n          {showReviewForm && (\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4\"\n              onClick={(e) => {\n                if (e.target === e.currentTarget) {\n                  setShowReviewForm(false);\n                }\n              }}\n            >\n              <motion.div\n                initial={{ scale: 0.9, opacity: 0 }}\n                animate={{ scale: 1, opacity: 1 }}\n                exit={{ scale: 0.9, opacity: 0 }}\n                className=\"bg-white dark:bg-gray-900 rounded-2xl p-8 max-w-lg w-full max-h-[90vh] overflow-y-auto\"\n              >\n                <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-6\">\n                  Leave a Review\n                </h3>\n                \n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"name\">Name *</Label>\n                    <Input\n                      id=\"name\"\n                      value={newReview.name}\n                      onChange={(e) => setNewReview(prev => ({ ...prev, name: e.target.value }))}\n                      placeholder=\"Your full name\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"title\">Job Title</Label>\n                    <Input\n                      id=\"title\"\n                      value={newReview.title}\n                      onChange={(e) => setNewReview(prev => ({ ...prev, title: e.target.value }))}\n                      placeholder=\"e.g., Software Engineer\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"company\">Company</Label>\n                    <Input\n                      id=\"company\"\n                      value={newReview.company}\n                      onChange={(e) => setNewReview(prev => ({ ...prev, company: e.target.value }))}\n                      placeholder=\"e.g., Tech Corp\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"facebookId\">Facebook ID (optional)</Label>\n                    <Input\n                      id=\"facebookId\"\n                      value={newReview.facebookId}\n                      onChange={(e) => setNewReview(prev => ({ ...prev, facebookId: e.target.value }))}\n                      placeholder=\"Your Facebook username\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"rating\">Rating</Label>\n                    <div className=\"flex items-center space-x-2 mt-1\">\n                      {[1, 2, 3, 4, 5].map((star) => (\n                        <button\n                          key={star}\n                          type=\"button\"\n                          onClick={() => setNewReview(prev => ({ ...prev, rating: star }))}\n                          className={`p-1 ${star <= newReview.rating ? 'text-yellow-500' : 'text-gray-300'}`}\n                        >\n                          <StarIcon className=\"w-6 h-6 fill-current\" />\n                        </button>\n                      ))}\n                      <span className=\"ml-2 text-sm text-gray-600 dark:text-gray-400\">\n                        {newReview.rating} star{newReview.rating !== 1 ? 's' : ''}\n                      </span>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"content\">Comment *</Label>\n                    <Textarea\n                      id=\"content\"\n                      value={newReview.content}\n                      onChange={(e) => setNewReview(prev => ({ ...prev, content: e.target.value }))}\n                      placeholder=\"Share your experience working with me...\"\n                      rows={4}\n                      className=\"mt-1\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"flex justify-end space-x-3 mt-6\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setShowReviewForm(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    onClick={handleSubmitReview}\n                    disabled={createReviewMutation.isPending}\n                    className=\"bg-gradient-to-r from-indigo-500 to-purple-500 hover:from-indigo-600 hover:to-purple-600\"\n                  >\n                    {createReviewMutation.isPending && (\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    )}\n                    Submit Review\n                  </Button>\n                </div>\n              </motion.div>\n            </motion.div>\n          )}\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":15394},"client/src/components/footer.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { GlassCard } from \"./ui/glass-card\";\nimport { Github, Linkedin, Mail, Twitter, ArrowUp, Heart, ExternalLink } from \"lucide-react\";\n\nexport function Footer() {\n  const currentYear = new Date().getFullYear();\n\n  const navItems = [\n    { href: \"#home\", label: \"Home\" },\n    { href: \"#about\", label: \"About\" },\n    { href: \"#projects\", label: \"Projects\" },\n    { href: \"#contact\", label: \"Contact\" },\n  ];\n\n  const socialLinks = [\n    { href: \"https://github.com/chanakaprasanna\", icon: Github, label: \"GitHub\" },\n    { href: \"https://linkedin.com/in/chanakaprasanna\", icon: Linkedin, label: \"LinkedIn\" },\n    { href: \"https://twitter.com/chanakaprasanna\", icon: Twitter, label: \"Twitter\" },\n    { href: \"mailto:chanaka@example.com\", icon: Mail, label: \"Email\" },\n  ];\n\n  const quickLinks = [\n    { href: \"#\", label: \"Blog\", external: true },\n    { href: \"#\", label: \"Resume\", external: true },\n    { href: \"#\", label: \"Portfolio\", external: false },\n    { href: \"#\", label: \"Services\", external: false },\n  ];\n\n  const handleNavClick = (href: string) => {\n    const element = document.querySelector(href);\n    if (element) {\n      element.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n    }\n  };\n\n  const scrollToTop = () => {\n    window.scrollTo({ top: 0, behavior: \"smooth\" });\n  };\n\n  return (\n    <footer className=\"relative py-20 px-6 mt-20\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Main Footer Content */}\n        <motion.div\n          initial={{ opacity: 0, y: 50 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          viewport={{ once: true }}\n        >\n          <GlassCard className=\"p-8 md:p-12 mb-8\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n              {/* Brand Section */}\n              <div className=\"lg:col-span-2\">\n                <motion.div\n                  initial={{ opacity: 0, x: -20 }}\n                  whileInView={{ opacity: 1, x: 0 }}\n                  transition={{ duration: 0.6 }}\n                  viewport={{ once: true }}\n                  className=\"mb-6\"\n                >\n                  <div className=\"flex items-center space-x-3 mb-4\">\n                    <div className=\"w-12 h-12 gradient-bg rounded-xl flex items-center justify-center shadow-lg\">\n                      <span className=\"text-white font-bold text-xl\">CP</span>\n                    </div>\n                    <div>\n                      <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                        Chanaka Prasanna\n                      </h3>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        AI/ML Engineer & Full Stack Developer\n                      </p>\n                    </div>\n                  </div>\n                  <p className=\"text-gray-600 dark:text-gray-400 mb-6 max-w-md\">\n                    Building intelligent solutions that bridge the gap between human needs and \n                    machine capabilities. Available for freelance projects and collaboration.\n                  </p>\n                  \n                  {/* Social Links */}\n                  <div className=\"flex space-x-4\">\n                    {socialLinks.map((social, index) => (\n                      <motion.a\n                        key={social.label}\n                        href={social.href}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        initial={{ opacity: 0, scale: 0.8 }}\n                        whileInView={{ opacity: 1, scale: 1 }}\n                        transition={{ duration: 0.4, delay: index * 0.1 }}\n                        viewport={{ once: true }}\n                        whileHover={{ scale: 1.1 }}\n                        whileTap={{ scale: 0.95 }}\n                        className=\"w-10 h-10 glass-effect rounded-xl flex items-center justify-center hover:glass-effect-strong transition-all duration-300 group\"\n                      >\n                        <social.icon className=\"w-5 h-5 text-gray-600 dark:text-gray-400 group-hover:text-indigo-600 dark:group-hover:text-indigo-400 transition-colors\" />\n                      </motion.a>\n                    ))}\n                  </div>\n                </motion.div>\n              </div>\n\n              {/* Navigation Links */}\n              <div>\n                <motion.div\n                  initial={{ opacity: 0, y: 20 }}\n                  whileInView={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.6, delay: 0.2 }}\n                  viewport={{ once: true }}\n                >\n                  <h4 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n                    Navigation\n                  </h4>\n                  <ul className=\"space-y-3\">\n                    {navItems.map((item, index) => (\n                      <li key={item.href}>\n                        <motion.button\n                          initial={{ opacity: 0, x: -10 }}\n                          whileInView={{ opacity: 1, x: 0 }}\n                          transition={{ duration: 0.4, delay: index * 0.1 }}\n                          viewport={{ once: true }}\n                          onClick={() => handleNavClick(item.href)}\n                          className=\"text-gray-600 dark:text-gray-400 hover:text-indigo-600 dark:hover:text-indigo-400 transition-colors duration-200 flex items-center group\"\n                        >\n                          <span className=\"w-2 h-2 bg-gradient-to-r from-indigo-500 to-purple-500 rounded-full mr-3 opacity-0 group-hover:opacity-100 transition-opacity\" />\n                          {item.label}\n                        </motion.button>\n                      </li>\n                    ))}\n                  </ul>\n                </motion.div>\n              </div>\n\n              {/* Quick Links */}\n              <div>\n                <motion.div\n                  initial={{ opacity: 0, y: 20 }}\n                  whileInView={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.6, delay: 0.3 }}\n                  viewport={{ once: true }}\n                >\n                  <h4 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n                    Quick Links\n                  </h4>\n                  <ul className=\"space-y-3\">\n                    {quickLinks.map((link, index) => (\n                      <li key={link.label}>\n                        <motion.a\n                          href={link.href}\n                          target={link.external ? \"_blank\" : \"_self\"}\n                          rel={link.external ? \"noopener noreferrer\" : \"\"}\n                          initial={{ opacity: 0, x: -10 }}\n                          whileInView={{ opacity: 1, x: 0 }}\n                          transition={{ duration: 0.4, delay: index * 0.1 }}\n                          viewport={{ once: true }}\n                          className=\"text-gray-600 dark:text-gray-400 hover:text-indigo-600 dark:hover:text-indigo-400 transition-colors duration-200 flex items-center group\"\n                        >\n                          <span className=\"w-2 h-2 bg-gradient-to-r from-cyan-500 to-emerald-500 rounded-full mr-3 opacity-0 group-hover:opacity-100 transition-opacity\" />\n                          {link.label}\n                          {link.external && (\n                            <ExternalLink className=\"w-3 h-3 ml-1 opacity-0 group-hover:opacity-100 transition-opacity\" />\n                          )}\n                        </motion.a>\n                      </li>\n                    ))}\n                  </ul>\n                </motion.div>\n              </div>\n            </div>\n          </GlassCard>\n        </motion.div>\n\n        {/* Bottom Bar */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.4 }}\n          viewport={{ once: true }}\n        >\n          <GlassCard className=\"p-6\">\n            <div className=\"flex flex-col md:flex-row justify-between items-center\">\n              <div className=\"flex items-center space-x-2 mb-4 md:mb-0\">\n                <span className=\"text-gray-600 dark:text-gray-400\">\n                  © {currentYear} Chanaka Prasanna. All rights reserved.\n                </span>\n                <span className=\"text-gray-400 dark:text-gray-600\">•</span>\n                <span className=\"text-gray-600 dark:text-gray-400 flex items-center\">\n                  Built with <Heart className=\"w-4 h-4 text-red-500 mx-1\" fill=\"currentColor\" /> and React\n                </span>\n              </div>\n              \n              <motion.button\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                onClick={scrollToTop}\n                className=\"flex items-center space-x-2 px-4 py-2 glass-effect rounded-xl hover:glass-effect-strong transition-all duration-300 group\"\n              >\n                <ArrowUp className=\"w-4 h-4 text-gray-600 dark:text-gray-400 group-hover:text-indigo-600 dark:group-hover:text-indigo-400 transition-colors\" />\n                <span className=\"text-gray-600 dark:text-gray-400 group-hover:text-indigo-600 dark:group-hover:text-indigo-400 transition-colors\">\n                  Back to Top\n                </span>\n              </motion.button>\n            </div>\n          </GlassCard>\n        </motion.div>\n      </div>\n    </footer>\n  );\n}","size_bytes":9560},"client/src/components/hero-section.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { GlassCard } from \"./ui/glass-card\";\n\nexport function HeroSection() {\n  const handleScrollToSection = (sectionId: string) => {\n    const element = document.querySelector(sectionId);\n    if (element) {\n      element.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n    }\n  };\n\n  return (\n    <section id=\"home\" className=\"min-h-screen flex items-center justify-center pt-24 pb-20 px-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"text-center\">\n          {/* Profile Image */}\n          <motion.div\n            initial={{ scale: 0, opacity: 0 }}\n            animate={{ scale: 1, opacity: 1 }}\n            transition={{ duration: 0.8 }}\n            className=\"mb-8 flex justify-center\"\n          >\n            <div className=\"relative\">\n              <div className=\"w-32 h-32 gradient-bg rounded-full p-1 animate-pulse-slow\">\n                <div className=\"w-full h-full bg-gray-300 dark:bg-gray-700 rounded-full flex items-center justify-center\">\n                  <span className=\"text-4xl font-bold text-gray-600 dark:text-gray-400\">CP</span>\n                </div>\n              </div>\n              <div className=\"absolute -top-2 -right-2 w-6 h-6 bg-green-500 rounded-full border-2 border-white dark:border-gray-900 animate-bounce-slow\" />\n            </div>\n          </motion.div>\n\n          {/* Main Headlines */}\n          <motion.div\n            initial={{ opacity: 0, y: 50 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.2 }}\n            className=\"mb-8\"\n          >\n            <h1 className=\"text-5xl md:text-7xl font-bold text-gray-900 dark:text-white mb-4\">\n              The future is{\" \"}\n              <span className=\"gradient-text\">digital</span>\n            </h1>\n            <h2 className=\"text-2xl md:text-3xl font-semibold text-gray-700 dark:text-gray-300 mb-2\">\n              and it's happening now\n            </h2>\n            <p className=\"text-xl md:text-2xl text-gray-600 dark:text-gray-400 mb-6\">\n              Bridging the Gap Between Human and Machines\n            </p>\n          </motion.div>\n\n          {/* Introduction */}\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.4 }}\n            className=\"mb-8\"\n          >\n            <p className=\"text-lg md:text-xl text-gray-700 dark:text-gray-300 max-w-3xl mx-auto\">\n              Hi, I'm{\" \"}\n              <span className=\"font-bold text-indigo-600 dark:text-indigo-400\">\n                Chanaka\n              </span>\n              , a AI/ML Enthusiast | Blogger | Final-year Undergraduate at University of Moratuwa\n            </p>\n          </motion.div>\n\n          {/* CTA Buttons */}\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.6 }}\n            className=\"flex flex-col sm:flex-row gap-4 justify-center\"\n          >\n            <motion.button\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              onClick={() => handleScrollToSection(\"#projects\")}\n              className=\"group relative px-8 py-4 gradient-bg text-white rounded-2xl font-semibold shadow-lg hover:shadow-xl transition-all duration-300\"\n            >\n              <span className=\"relative z-10\">Show My Work</span>\n              <div className=\"absolute inset-0 bg-gradient-to-r from-indigo-600 to-purple-600 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n            </motion.button>\n            \n            <motion.button\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              onClick={() => handleScrollToSection(\"#contact\")}\n              className=\"group px-8 py-4 glass-effect text-gray-900 dark:text-white rounded-2xl font-semibold hover:glass-effect-strong transition-all duration-300\"\n            >\n              Get In Touch\n            </motion.button>\n          </motion.div>\n\n          {/* Floating Elements */}\n          <div className=\"absolute inset-0 pointer-events-none\">\n            <motion.div\n              animate={{\n                y: [0, -20, 0],\n                rotate: [0, 5, 0],\n              }}\n              transition={{\n                duration: 6,\n                repeat: Infinity,\n                ease: \"easeInOut\",\n              }}\n              className=\"absolute top-1/4 left-1/4 w-20 h-20 bg-gradient-to-r from-indigo-500/20 to-purple-500/20 rounded-full blur-xl\"\n            />\n            <motion.div\n              animate={{\n                y: [0, 20, 0],\n                rotate: [0, -5, 0],\n              }}\n              transition={{\n                duration: 8,\n                repeat: Infinity,\n                ease: \"easeInOut\",\n                delay: 2,\n              }}\n              className=\"absolute bottom-1/4 right-1/4 w-16 h-16 bg-gradient-to-r from-cyan-500/20 to-emerald-500/20 rounded-full blur-xl\"\n            />\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5173},"client/src/components/navigation.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useTheme } from \"@/hooks/use-theme\";\nimport { Moon, Sun, Menu, X } from \"lucide-react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\nexport function Navigation() {\n  const { theme, toggleTheme } = useTheme();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [scrolled, setScrolled] = useState(false);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setScrolled(window.scrollY > 50);\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  const navItems = [\n    { href: \"#home\", label: \"Home\" },\n    { href: \"#about\", label: \"About\" },\n    { href: \"#projects\", label: \"Projects\" },\n    { href: \"#contact\", label: \"Contact\" },\n  ];\n\n  const handleNavClick = (href: string) => {\n    setIsMenuOpen(false);\n    const element = document.querySelector(href);\n    if (element) {\n      element.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n    }\n  };\n\n  return (\n    <motion.nav\n      initial={{ y: -100 }}\n      animate={{ y: 0 }}\n      className={`fixed top-0 left-0 right-0 z-50 px-6 py-4 transition-all duration-300 ${\n        scrolled ? \"backdrop-blur-xl\" : \"\"\n      }`}\n    >\n      <div className=\"max-w-7xl mx-auto\">\n        <div className={`glass-effect rounded-2xl shadow-xl transition-all duration-300 ${\n          scrolled ? \"glass-effect-strong\" : \"\"\n        }`}>\n          <div className=\"flex items-center justify-between px-6 py-4\">\n            {/* Logo */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center space-x-2\"\n            >\n              <div className=\"w-10 h-10 gradient-bg rounded-lg flex items-center justify-center shadow-lg\">\n                <span className=\"text-white font-bold text-lg\">CP</span>\n              </div>\n              <span className=\"text-xl font-bold text-gray-900 dark:text-white\">\n                Chanaka\n              </span>\n            </motion.div>\n\n            {/* Desktop Navigation */}\n            <div className=\"hidden md:flex items-center space-x-8\">\n              {navItems.map((item, index) => (\n                <motion.button\n                  key={item.href}\n                  initial={{ opacity: 0, y: -20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: index * 0.1 }}\n                  onClick={() => handleNavClick(item.href)}\n                  className=\"text-gray-700 dark:text-gray-300 hover:text-indigo-600 dark:hover:text-indigo-400 transition-colors duration-200 font-medium\"\n                >\n                  {item.label}\n                </motion.button>\n              ))}\n            </div>\n\n            {/* Controls */}\n            <div className=\"flex items-center space-x-4\">\n              <motion.button\n                whileHover={{ scale: 1.1 }}\n                whileTap={{ scale: 0.9 }}\n                onClick={toggleTheme}\n                className=\"p-2 rounded-lg glass-effect hover:glass-effect-strong transition-all duration-200\"\n              >\n                {theme === \"light\" ? (\n                  <Moon className=\"w-5 h-5 text-gray-700\" />\n                ) : (\n                  <Sun className=\"w-5 h-5 text-yellow-400\" />\n                )}\n              </motion.button>\n              \n              <motion.button\n                whileHover={{ scale: 1.1 }}\n                whileTap={{ scale: 0.9 }}\n                onClick={() => setIsMenuOpen(!isMenuOpen)}\n                className=\"md:hidden p-2 rounded-lg glass-effect hover:glass-effect-strong transition-all duration-200\"\n              >\n                {isMenuOpen ? (\n                  <X className=\"w-5 h-5 text-gray-700 dark:text-gray-300\" />\n                ) : (\n                  <Menu className=\"w-5 h-5 text-gray-700 dark:text-gray-300\" />\n                )}\n              </motion.button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile Menu */}\n      <AnimatePresence>\n        {isMenuOpen && (\n          <motion.div\n            initial={{ opacity: 0, y: -20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n            className=\"md:hidden mt-4 mx-6\"\n          >\n            <div className=\"glass-effect rounded-2xl shadow-xl p-6\">\n              <div className=\"flex flex-col space-y-4\">\n                {navItems.map((item, index) => (\n                  <motion.button\n                    key={item.href}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: index * 0.1 }}\n                    onClick={() => handleNavClick(item.href)}\n                    className=\"text-gray-700 dark:text-gray-300 hover:text-indigo-600 dark:hover:text-indigo-400 transition-colors duration-200 font-medium py-2 text-left\"\n                  >\n                    {item.label}\n                  </motion.button>\n                ))}\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </motion.nav>\n  );\n}\n","size_bytes":5158},"client/src/components/projects-section.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { GlassCard } from \"./ui/glass-card\";\nimport { ExternalLink, Github, Loader2, Palette, Code, Database, Zap } from \"lucide-react\";\nimport type { Project } from \"@shared/schema\";\n\nexport function ProjectsSection() {\n  const { data: projects, isLoading, error } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n  });\n\n  // Category configuration\n  const categories = [\n    {\n      key: \"figma\",\n      title: \"Figma Work\",\n      subtitle: \"UI/UX design and prototypes\",\n      icon: <Palette className=\"w-6 h-6\" />,\n      gradient: \"from-pink-500 to-purple-500\",\n      bgGradient: \"from-pink-500/10 to-purple-500/10\"\n    },\n    {\n      key: \"frontend\",\n      title: \"Frontend Work\",\n      subtitle: \"React, HTML, CSS, animations\",\n      icon: <Code className=\"w-6 h-6\" />,\n      gradient: \"from-blue-500 to-cyan-500\",\n      bgGradient: \"from-blue-500/10 to-cyan-500/10\"\n    },\n    {\n      key: \"full-stack\",\n      title: \"Full Stack Projects\",\n      subtitle: \"Backend integration, APIs, databases\",\n      icon: <Database className=\"w-6 h-6\" />,\n      gradient: \"from-green-500 to-emerald-500\",\n      bgGradient: \"from-green-500/10 to-emerald-500/10\"\n    },\n    {\n      key: \"animation\",\n      title: \"Animation Work\",\n      subtitle: \"Creative motion design, scroll effects, interactive UI\",\n      icon: <Zap className=\"w-6 h-6\" />,\n      gradient: \"from-orange-500 to-red-500\",\n      bgGradient: \"from-orange-500/10 to-red-500/10\"\n    }\n  ];\n\n  // Group projects by category\n  const projectsByCategory = projects?.reduce((acc, project) => {\n    const category = project.category || \"full-stack\";\n    if (!acc[category]) acc[category] = [];\n    acc[category].push(project);\n    return acc;\n  }, {} as Record<string, Project[]>) || {};\n\n  if (isLoading) {\n    return (\n      <section id=\"projects\" className=\"py-20 px-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex justify-center items-center min-h-[400px]\">\n            <Loader2 className=\"w-8 h-8 animate-spin text-indigo-600\" />\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  if (error) {\n    return (\n      <section id=\"projects\" className=\"py-20 px-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center\">\n            <h2 className=\"text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-4\">\n              Recent <span className=\"gradient-text\">Projects</span>\n            </h2>\n            <p className=\"text-red-600 dark:text-red-400\">\n              Failed to load projects. Please try again later.\n            </p>\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section id=\"projects\" className=\"py-20 px-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Section Header */}\n        <motion.div\n          initial={{ opacity: 0, y: 50 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          viewport={{ once: true }}\n          className=\"text-center mb-16\"\n        >\n          <h2 className=\"text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-4\">\n            Recent <span className=\"gradient-text\">Projects</span>\n          </h2>\n          <p className=\"text-xl text-gray-600 dark:text-gray-400 max-w-2xl mx-auto\">\n            A curated collection of projects across design, development, and animation\n          </p>\n        </motion.div>\n\n        {/* Categories with Horizontal Scrolling */}\n        <div className=\"space-y-12\">\n          {categories.map((category, categoryIndex) => {\n            const categoryProjects = projectsByCategory[category.key] || [];\n            if (categoryProjects.length === 0) return null;\n\n            return (\n              <motion.div\n                key={category.key}\n                initial={{ opacity: 0, y: 30 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: categoryIndex * 0.1 }}\n                viewport={{ once: true }}\n              >\n                {/* Category Header */}\n                <div className=\"mb-6\">\n                  <div className=\"category-header\">\n                    <div className={`w-12 h-12 rounded-2xl bg-gradient-to-r ${category.gradient} flex items-center justify-center text-white shadow-lg`}>\n                      {category.icon}\n                    </div>\n                    <div className=\"ml-4\">\n                      <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                        {category.title}\n                      </h3>\n                      <p className=\"text-gray-600 dark:text-gray-400\">\n                        {category.subtitle}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Horizontal Scrolling Projects */}\n                <div className=\"overflow-x-auto horizontal-scroll pb-6\">\n                  <div className=\"flex space-x-6 w-max px-1\">\n                    {categoryProjects.map((project, index) => (\n                      <motion.div\n                        key={project.id}\n                        initial={{ opacity: 0, x: 50 }}\n                        whileInView={{ opacity: 1, x: 0 }}\n                        transition={{ duration: 0.6, delay: index * 0.1 }}\n                        viewport={{ once: true }}\n                        className=\"flex-shrink-0\"\n                      >\n                        <GlassCard className=\"p-6 w-80 h-full group\" hover>\n                          <div className=\"mb-4 relative overflow-hidden rounded-2xl\">\n                            <img\n                              src={project.image}\n                              alt={project.title}\n                              className=\"w-full h-48 object-cover transition-transform duration-300 group-hover:scale-105\"\n                            />\n                            <div className={`absolute inset-0 bg-gradient-to-t ${category.bgGradient} opacity-0 group-hover:opacity-100 transition-opacity duration-300`} />\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-2 mb-3\">\n                            <div className={`w-6 h-6 rounded-lg bg-gradient-to-r ${category.gradient} flex items-center justify-center text-white text-xs`}>\n                              {category.icon}\n                            </div>\n                            <span className={`text-sm font-medium bg-gradient-to-r ${category.gradient} bg-clip-text text-transparent`}>\n                              {category.title}\n                            </span>\n                          </div>\n\n                          <h4 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\">\n                            {project.title}\n                          </h4>\n                          <p className=\"text-gray-600 dark:text-gray-400 mb-4 line-clamp-2\">\n                            {project.description}\n                          </p>\n                          \n                          <div className=\"flex flex-wrap gap-2 mb-4\">\n                            {Array.isArray(project.technologies) ? project.technologies.slice(0, 3).map((tech, techIndex) => (\n                              <span\n                                key={techIndex}\n                                className={`px-3 py-1 bg-gradient-to-r ${category.bgGradient} text-gray-700 dark:text-gray-300 rounded-full text-sm font-medium`}\n                              >\n                                {tech}\n                              </span>\n                            )) : null}\n                            {Array.isArray(project.technologies) && project.technologies.length > 3 && (\n                              <span className=\"px-3 py-1 bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400 rounded-full text-sm\">\n                                +{project.technologies.length - 3} more\n                              </span>\n                            )}\n                          </div>\n                          \n                          <div className=\"flex space-x-4 mt-auto\">\n                            {project.githubUrl && (\n                              <a\n                                href={project.githubUrl}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                                className=\"flex items-center space-x-2 text-gray-600 dark:text-gray-400 hover:text-indigo-600 dark:hover:text-indigo-400 transition-colors\"\n                              >\n                                <Github className=\"w-4 h-4\" />\n                                <span>Code</span>\n                              </a>\n                            )}\n                            {project.liveUrl && (\n                              <a\n                                href={project.liveUrl}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                                className=\"flex items-center space-x-2 text-gray-600 dark:text-gray-400 hover:text-indigo-600 dark:hover:text-indigo-400 transition-colors\"\n                              >\n                                <ExternalLink className=\"w-4 h-4\" />\n                                <span>Live</span>\n                              </a>\n                            )}\n                          </div>\n                        </GlassCard>\n                      </motion.div>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Scroll Indicator - only show if there are multiple projects */}\n                {categoryProjects.length > 1 && (\n                  <div className=\"flex justify-center mt-4\">\n                    <div className=\"flex items-center space-x-2 text-gray-400 dark:text-gray-600 text-sm\">\n                      <span>← Scroll to see more projects →</span>\n                    </div>\n                  </div>\n                )}\n              </motion.div>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":10214},"client/src/components/theme-provider.tsx":{"content":"import { ThemeProvider as CustomThemeProvider } from \"@/hooks/use-theme\";\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  return <CustomThemeProvider>{children}</CustomThemeProvider>;\n}\n","size_bytes":218},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-scroll-animations.tsx":{"content":"import { useEffect, useRef } from \"react\";\n\nexport function useScrollAnimation() {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          element.classList.add(\"animate-fade-in\");\n        }\n      },\n      { threshold: 0.1 }\n    );\n\n    observer.observe(element);\n\n    return () => observer.disconnect();\n  }, []);\n\n  return ref;\n}\n\nexport function useScrollAnimationSlide() {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          element.classList.add(\"animate-slide-up\");\n        }\n      },\n      { threshold: 0.1 }\n    );\n\n    observer.observe(element);\n\n    return () => observer.disconnect();\n  }, []);\n\n  return ref;\n}\n\nexport function useScrollAnimationScale() {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          element.classList.add(\"animate-scale-in\");\n        }\n      },\n      { threshold: 0.1 }\n    );\n\n    observer.observe(element);\n\n    return () => observer.disconnect();\n  }, []);\n\n  return ref;\n}\n","size_bytes":1471},"client/src/hooks/use-theme.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(\"light\");\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"theme\") as Theme;\n    if (savedTheme) {\n      setTheme(savedTheme);\n    } else if (window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\n      setTheme(\"dark\");\n    }\n  }, []);\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1285},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"\nimport { useState, useEffect, useRef } from 'react';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Trash2, Edit, Plus, Loader2, Upload, X, Image } from 'lucide-react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport type { Project } from '@shared/schema';\n\ninterface NewProject {\n  title: string;\n  description: string;\n  image: string;\n  technologies: string[];\n  githubUrl: string;\n  liveUrl: string;\n  featured: number;\n  category: string;\n}\n\nexport default function AdminDashboard() {\n  const [editingProject, setEditingProject] = useState<Project | null>(null);\n  const [newProject, setNewProject] = useState<NewProject>({\n    title: '',\n    description: '',\n    image: '',\n    technologies: [],\n    githubUrl: '',\n    liveUrl: '',\n    featured: 0,\n    category: 'frontend'\n  });\n  const [uploadedFile, setUploadedFile] = useState<File | null>(null);\n  const [uploadPreview, setUploadPreview] = useState<string>('');\n  const [isUploading, setIsUploading] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  // Fetch projects using React Query\n  const { data: projects = [], isLoading, error } = useQuery<Project[]>({\n    queryKey: ['/api/projects'],\n  });\n\n  // Create project mutation\n  const createProjectMutation = useMutation({\n    mutationFn: async (projectData: NewProject) => {\n      const response = await apiRequest('POST', '/api/projects', projectData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Project added successfully!',\n      });\n      \n      // Reset form\n      setNewProject({\n        title: '',\n        description: '',\n        image: '',\n        technologies: [],\n        githubUrl: '',\n        liveUrl: '',\n        featured: 0,\n        category: 'frontend'\n      });\n      \n      // Invalidate and refetch projects\n      queryClient.invalidateQueries({ queryKey: ['/api/projects'] });\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to add project',\n        variant: 'destructive',\n      });\n    }\n  });\n\n  // Update project mutation\n  const updateProjectMutation = useMutation({\n    mutationFn: async ({ id, projectData }: { id: number; projectData: Partial<NewProject> }) => {\n      const response = await apiRequest('PUT', `/api/projects/${id}`, projectData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Project updated successfully!',\n      });\n      \n      setEditingProject(null);\n      // Invalidate and refetch projects\n      queryClient.invalidateQueries({ queryKey: ['/api/projects'] });\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to update project',\n        variant: 'destructive',\n      });\n    }\n  });\n\n  // Delete project mutation\n  const deleteProjectMutation = useMutation({\n    mutationFn: async (id: number) => {\n      await apiRequest('DELETE', `/api/projects/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Project deleted successfully!',\n      });\n      \n      // Invalidate and refetch projects\n      queryClient.invalidateQueries({ queryKey: ['/api/projects'] });\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to delete project',\n        variant: 'destructive',\n      });\n    }\n  });\n\n  useEffect(() => {\n    // Check admin authentication\n    if (!localStorage.getItem('adminAuth')) {\n      window.location.href = '/admin';\n      return;\n    }\n  }, []);\n\n  const handleLogout = () => {\n    localStorage.removeItem('adminAuth');\n    window.location.href = '/';\n  };\n\n  const handleTechnologiesChange = (value: string, isNew: boolean = false) => {\n    const technologies = value.split(',').map(tech => tech.trim()).filter(tech => tech);\n    if (isNew) {\n      setNewProject(prev => ({ ...prev, technologies }));\n    } else if (editingProject) {\n      setEditingProject({ ...editingProject, technologies });\n    }\n  };\n\n  const handleAddProject = () => {\n    createProjectMutation.mutate(newProject);\n  };\n\n  const handleUpdateProject = () => {\n    if (!editingProject) return;\n    \n    const { id, createdAt, ...projectData } = editingProject;\n    updateProjectMutation.mutate({\n      id: id!,\n      projectData: {\n        ...projectData,\n        featured: projectData.featured || 0,\n        technologies: Array.isArray(projectData.technologies) ? projectData.technologies : [],\n        githubUrl: projectData.githubUrl || '',\n        liveUrl: projectData.liveUrl || ''\n      }\n    });\n  };\n\n  const handleDeleteProject = (id: number) => {\n    if (!confirm('Are you sure you want to delete this project?')) return;\n    deleteProjectMutation.mutate(id);\n  };\n\n  // File upload handlers\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.size > 10 * 1024 * 1024) {\n        toast({\n          title: 'Error',\n          description: 'File size must be less than 10MB',\n          variant: 'destructive'\n        });\n        return;\n      }\n\n      const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];\n      if (!allowedTypes.includes(file.type)) {\n        toast({\n          title: 'Error',\n          description: 'Only JPEG, PNG, GIF, and WebP files are allowed',\n          variant: 'destructive'\n        });\n        return;\n      }\n\n      setUploadedFile(file);\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setUploadPreview(e.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleFileUpload = async () => {\n    if (!uploadedFile) return;\n\n    setIsUploading(true);\n    try {\n      const formData = new FormData();\n      formData.append('image', uploadedFile);\n\n      const response = await fetch('/api/upload', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n\n      const result = await response.json();\n      setNewProject(prev => ({ ...prev, image: result.url }));\n      \n      toast({\n        title: 'Success',\n        description: 'File uploaded successfully!',\n      });\n\n      // Clear upload state\n      setUploadedFile(null);\n      setUploadPreview('');\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to upload file. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const clearFileUpload = () => {\n    setUploadedFile(null);\n    setUploadPreview('');\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <div className=\"border-b bg-white dark:bg-gray-800\">\n        <div className=\"container mx-auto px-6 py-4 flex justify-between items-center\">\n          <h1 className=\"text-2xl font-bold\">Portfolio Admin</h1>\n          <Button onClick={handleLogout} variant=\"outline\">Logout</Button>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-6 py-8\">\n        <Tabs defaultValue=\"projects\">\n          <TabsList className=\"mb-6\">\n            <TabsTrigger value=\"projects\">Projects</TabsTrigger>\n            <TabsTrigger value=\"add-project\">Add Project</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"projects\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Manage Projects</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {isLoading ? (\n                  <div className=\"flex justify-center items-center py-8\">\n                    <Loader2 className=\"w-6 h-6 animate-spin\" />\n                  </div>\n                ) : error ? (\n                  <div className=\"text-center py-8 text-red-600\">\n                    Failed to load projects. Please try again.\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {projects.length === 0 ? (\n                      <div className=\"text-center py-8 text-gray-500\">\n                        No projects found. Add your first project!\n                      </div>\n                    ) : (\n                      projects.map((project) => (\n                        <div key={project.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                          <div>\n                            <h3 className=\"font-semibold\">{project.title}</h3>\n                            <p className=\"text-sm text-gray-600\">{project.category} • {project.featured ? 'Featured' : 'Regular'}</p>\n                          </div>\n                          <div className=\"flex gap-2\">\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\" \n                              onClick={() => setEditingProject(project)}\n                              disabled={updateProjectMutation.isPending}\n                            >\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                            <Button \n                              size=\"sm\" \n                              variant=\"destructive\" \n                              onClick={() => handleDeleteProject(project.id!)}\n                              disabled={deleteProjectMutation.isPending}\n                            >\n                              {deleteProjectMutation.isPending ? (\n                                <Loader2 className=\"w-4 h-4 animate-spin\" />\n                              ) : (\n                                <Trash2 className=\"w-4 h-4\" />\n                              )}\n                            </Button>\n                          </div>\n                        </div>\n                      ))\n                    )}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"add-project\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Add New Project</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"title\">Title</Label>\n                    <Input\n                      id=\"title\"\n                      value={newProject.title}\n                      onChange={(e) => setNewProject(prev => ({ ...prev, title: e.target.value }))}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"category\">Category</Label>\n                    <Select value={newProject.category} onValueChange={(value) => setNewProject(prev => ({ ...prev, category: value }))}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"figma\">Figma</SelectItem>\n                        <SelectItem value=\"frontend\">Frontend</SelectItem>\n                        <SelectItem value=\"full-stack\">Full Stack</SelectItem>\n                        <SelectItem value=\"animation\">Animation</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={newProject.description}\n                    onChange={(e) => setNewProject(prev => ({ ...prev, description: e.target.value }))}\n                  />\n                </div>\n\n                {/* Image Upload Section */}\n                <div>\n                  <Label>Project Image/GIF</Label>\n                  <div className=\"mt-2 space-y-4\">\n                    {/* File Upload */}\n                    <div className=\"border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-6\">\n                      <div className=\"text-center\">\n                        <Image className=\"mx-auto h-12 w-12 text-gray-400\" />\n                        <div className=\"mt-4\">\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={() => fileInputRef.current?.click()}\n                            className=\"mb-2\"\n                          >\n                            <Upload className=\"w-4 h-4 mr-2\" />\n                            Upload Image/GIF\n                          </Button>\n                          <input\n                            ref={fileInputRef}\n                            type=\"file\"\n                            accept=\"image/*\"\n                            onChange={handleFileSelect}\n                            className=\"hidden\"\n                          />\n                          <p className=\"text-xs text-gray-500 mt-2\">\n                            Support: JPEG, PNG, GIF, WebP • Max 10MB\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Upload Preview */}\n                    {uploadPreview && (\n                      <div className=\"border rounded-lg p-4\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"text-sm font-medium\">Preview:</span>\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={clearFileUpload}\n                          >\n                            <X className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                        <img\n                          src={uploadPreview}\n                          alt=\"Preview\"\n                          className=\"w-32 h-32 object-cover rounded-md\"\n                        />\n                        <div className=\"flex justify-end mt-3\">\n                          <Button\n                            type=\"button\"\n                            onClick={handleFileUpload}\n                            disabled={isUploading}\n                            size=\"sm\"\n                          >\n                            {isUploading && <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />}\n                            {isUploading ? 'Uploading...' : 'Use This Image'}\n                          </Button>\n                        </div>\n                      </div>\n                    )}\n\n                    {/* OR divider */}\n                    <div className=\"relative\">\n                      <div className=\"absolute inset-0 flex items-center\">\n                        <div className=\"w-full border-t border-gray-300 dark:border-gray-600\" />\n                      </div>\n                      <div className=\"relative flex justify-center text-sm\">\n                        <span className=\"px-2 bg-white dark:bg-gray-900 text-gray-500\">OR</span>\n                      </div>\n                    </div>\n\n                    {/* URL Input */}\n                    <div>\n                      <Label htmlFor=\"image-url\">Image URL</Label>\n                      <Input\n                        id=\"image-url\"\n                        value={newProject.image}\n                        onChange={(e) => setNewProject(prev => ({ ...prev, image: e.target.value }))}\n                        placeholder=\"https://example.com/image.jpg\"\n                        className=\"mt-1\"\n                      />\n                    </div>\n\n                    {/* Current Image Preview */}\n                    {newProject.image && (\n                      <div className=\"border rounded-lg p-4\">\n                        <span className=\"text-sm font-medium\">Current Image:</span>\n                        <img\n                          src={newProject.image}\n                          alt=\"Current project image\"\n                          className=\"w-32 h-32 object-cover rounded-md mt-2\"\n                          onError={(e) => {\n                            (e.target as HTMLImageElement).style.display = 'none';\n                          }}\n                        />\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"technologies\">Technologies (comma separated)</Label>\n                  <Input\n                    id=\"technologies\"\n                    value={newProject.technologies.join(', ')}\n                    onChange={(e) => handleTechnologiesChange(e.target.value, true)}\n                    placeholder=\"React, TypeScript, Tailwind CSS\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"github\">GitHub URL</Label>\n                    <Input\n                      id=\"github\"\n                      value={newProject.githubUrl}\n                      onChange={(e) => setNewProject(prev => ({ ...prev, githubUrl: e.target.value }))}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"live\">Live URL</Label>\n                    <Input\n                      id=\"live\"\n                      value={newProject.liveUrl}\n                      onChange={(e) => setNewProject(prev => ({ ...prev, liveUrl: e.target.value }))}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"featured\"\n                    checked={newProject.featured === 1}\n                    onChange={(e) => setNewProject(prev => ({ ...prev, featured: e.target.checked ? 1 : 0 }))}\n                  />\n                  <Label htmlFor=\"featured\">Featured Project</Label>\n                </div>\n\n                <Button \n                  onClick={handleAddProject}\n                  className=\"w-full\"\n                  disabled={createProjectMutation.isPending}\n                >\n                  {createProjectMutation.isPending ? (\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  ) : (\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                  )}\n                  Add Project\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        {/* Edit Project Dialog */}\n        {editingProject && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 max-w-2xl w-full max-h-screen overflow-y-auto\">\n              <h2 className=\"text-xl font-bold mb-4\">Edit Project</h2>\n              \n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"edit-title\">Title</Label>\n                    <Input\n                      id=\"edit-title\"\n                      value={editingProject.title}\n                      onChange={(e) => setEditingProject({ ...editingProject, title: e.target.value })}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"edit-category\">Category</Label>\n                    <Select value={editingProject.category} onValueChange={(value) => setEditingProject({ ...editingProject, category: value })}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"figma\">Figma</SelectItem>\n                        <SelectItem value=\"frontend\">Frontend</SelectItem>\n                        <SelectItem value=\"full-stack\">Full Stack</SelectItem>\n                        <SelectItem value=\"animation\">Animation</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"edit-description\">Description</Label>\n                  <Textarea\n                    id=\"edit-description\"\n                    value={editingProject.description}\n                    onChange={(e) => setEditingProject({ ...editingProject, description: e.target.value })}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"edit-image\">Image URL</Label>\n                    <Input\n                      id=\"edit-image\"\n                      value={editingProject.image}\n                      onChange={(e) => setEditingProject({ ...editingProject, image: e.target.value })}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"edit-technologies\">Technologies (comma separated)</Label>\n                    <Input\n                      id=\"edit-technologies\"\n                      value={Array.isArray(editingProject.technologies) ? editingProject.technologies.join(', ') : ''}\n                      onChange={(e) => handleTechnologiesChange(e.target.value, false)}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"edit-github\">GitHub URL</Label>\n                    <Input\n                      id=\"edit-github\"\n                      value={editingProject.githubUrl || ''}\n                      onChange={(e) => setEditingProject({ ...editingProject, githubUrl: e.target.value })}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"edit-live\">Live URL</Label>\n                    <Input\n                      id=\"edit-live\"\n                      value={editingProject.liveUrl || ''}\n                      onChange={(e) => setEditingProject({ ...editingProject, liveUrl: e.target.value })}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"edit-featured\"\n                    checked={editingProject.featured === 1}\n                    onChange={(e) => setEditingProject({ ...editingProject, featured: e.target.checked ? 1 : 0 })}\n                  />\n                  <Label htmlFor=\"edit-featured\">Featured Project</Label>\n                </div>\n\n                <div className=\"flex gap-2 justify-end\">\n                  <Button variant=\"outline\" onClick={() => setEditingProject(null)}>\n                    Cancel\n                  </Button>\n                  <Button \n                    onClick={handleUpdateProject}\n                    disabled={updateProjectMutation.isPending}\n                  >\n                    {updateProjectMutation.isPending ? (\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    ) : null}\n                    Update Project\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":24436},"client/src/pages/admin-login.tsx":{"content":"\nimport { useState } from 'react';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function AdminLogin() {\n  const [password, setPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n\n    // Simple password check - replace with proper authentication\n    if (password === 'admin123') {\n      localStorage.setItem('adminAuth', 'true');\n      window.location.href = '/admin/dashboard';\n    } else {\n      toast({\n        title: 'Login Failed',\n        description: 'Invalid password',\n        variant: 'destructive',\n      });\n    }\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl\">Admin Login</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleLogin} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"Enter admin password\"\n                required\n              />\n            </div>\n            <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n              {loading ? 'Logging in...' : 'Login'}\n            </Button>\n          </form>\n          <p className=\"text-sm text-gray-500 mt-4 text-center\">\n            Demo password: admin123\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":2070},"client/src/pages/home.tsx":{"content":"import { AnimatedBackground } from \"@/components/animated-background\";\nimport { Navigation } from \"@/components/navigation\";\nimport { HeroSection } from \"@/components/hero-section\";\nimport { AboutSection } from \"@/components/about-section\";\nimport { ProjectsSection } from \"@/components/projects-section\";\nimport { ExperienceSection } from \"@/components/experience-section\";\nimport { ContactSection } from \"@/components/contact-section\";\nimport { Footer } from \"@/components/footer\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen bg-slate-50 dark:bg-slate-900 transition-colors duration-300 overflow-x-hidden\">\n      <AnimatedBackground />\n      <Navigation />\n      \n      <main className=\"relative z-10\">\n        <HeroSection />\n        <AboutSection />\n        <ProjectsSection />\n        <ExperienceSection />\n        <ContactSection />\n      </main>\n\n      {/* Modern Footer */}\n      <div className=\"relative z-10\">\n        <Footer />\n      </div>\n    </div>\n  );\n}\n","size_bytes":1004},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"obj/Debug/net8.0/Portfolio.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"Portfolio\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Debug\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+dc5cc9d567419df3bdbbbf63d3c9e34b9acc3254\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"Portfolio\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"Portfolio\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":979},"obj/Debug/net8.0/Portfolio.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::Microsoft.AspNetCore.Builder;\nglobal using global::Microsoft.AspNetCore.Hosting;\nglobal using global::Microsoft.AspNetCore.Http;\nglobal using global::Microsoft.AspNetCore.Routing;\nglobal using global::Microsoft.Extensions.Configuration;\nglobal using global::Microsoft.Extensions.DependencyInjection;\nglobal using global::Microsoft.Extensions.Hosting;\nglobal using global::Microsoft.Extensions.Logging;\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Net.Http.Json;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\n","size_bytes":753},"obj/Debug/net8.0/Portfolio.MvcApplicationPartsAssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Swashbuckle.AspNetCore.SwaggerGen\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":569},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/glass-card.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport { motion } from \"framer-motion\";\n\ninterface GlassCardProps extends React.HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n  variant?: \"default\" | \"strong\";\n  hover?: boolean;\n  delay?: number;\n}\n\nexport function GlassCard({ \n  children, \n  className, \n  variant = \"default\", \n  hover = true,\n  delay = 0,\n  ...props \n}: GlassCardProps) {\n  const variants = {\n    default: \"glass-effect\",\n    strong: \"glass-effect-strong\"\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5, delay }}\n      className={cn(\n        variants[variant],\n        \"rounded-3xl shadow-xl\",\n        hover && \"hover:shadow-2xl transition-all duration-300 transform hover:scale-105\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </motion.div>\n  );\n}\n","size_bytes":892},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/data/staticData.ts":{"content":"// Static data for frontend-only portfolio\nimport type { Project, Experience, Testimonial } from '../types';\n\nexport const projects: Project[] = [\n  {\n    id: 1,\n    title: \"Modern Dashboard UI\",\n    description: \"A comprehensive dashboard interface with analytics, user management, and real-time data visualization. Features dark/light mode and responsive design.\",\n    image: \"https://images.unsplash.com/photo-1551650975-87deedd944c3?w=800&h=600&fit=crop\",\n    technologies: [\"React\", \"TypeScript\", \"Tailwind CSS\", \"Chart.js\"],\n    githubUrl: \"https://github.com\",\n    liveUrl: \"https://example.com\",\n    category: \"frontend\",\n    featured: 1\n  },\n  {\n    id: 2,\n    title: \"E-commerce Platform\",\n    description: \"Full-stack e-commerce solution with payment integration, inventory management, and admin dashboard. Built with modern technologies.\",\n    image: \"https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?w=800&h=600&fit=crop\",\n    technologies: [\"Next.js\", \"Node.js\", \"PostgreSQL\", \"Stripe\"],\n    githubUrl: \"https://github.com\",\n    liveUrl: \"https://example.com\",\n    category: \"full-stack\",\n    featured: 1\n  },\n  {\n    id: 3,\n    title: \"Mobile App Prototype\",\n    description: \"Interactive mobile app design with micro-interactions and smooth animations. Designed for iOS and Android platforms.\",\n    image: \"https://images.unsplash.com/photo-1512941937669-90a1b58e7e9c?w=800&h=600&fit=crop\",\n    technologies: [\"Figma\", \"Protopie\", \"After Effects\"],\n    githubUrl: \"https://github.com\",\n    liveUrl: \"https://figma.com\",\n    category: \"figma\",\n    featured: 0\n  },\n  {\n    id: 4,\n    title: \"Interactive Landing Page\",\n    description: \"Award-winning landing page with scroll-triggered animations and 3D elements. Optimized for performance and accessibility.\",\n    image: \"https://images.unsplash.com/photo-1467232004584-a241de8bcf5d?w=800&h=600&fit=crop\",\n    technologies: [\"Three.js\", \"GSAP\", \"WebGL\", \"CSS3\"],\n    githubUrl: \"https://github.com\",\n    liveUrl: \"https://example.com\",\n    category: \"animation\",\n    featured: 1\n  },\n  {\n    id: 5,\n    title: \"Portfolio Website\",\n    description: \"Personal portfolio website with glassmorphism effects and smooth animations. Built with React and TypeScript.\",\n    image: \"https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=800&h=600&fit=crop\",\n    technologies: [\"React\", \"TypeScript\", \"Framer Motion\"],\n    githubUrl: \"https://github.com\",\n    liveUrl: \"https://example.com\",\n    category: \"frontend\",\n    featured: 0\n  },\n  {\n    id: 6,\n    title: \"SaaS Dashboard Design\",\n    description: \"Complete design system for a SaaS platform including components, layouts, and interactive prototypes.\",\n    image: \"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=800&h=600&fit=crop\",\n    technologies: [\"Figma\", \"Design System\", \"Component Library\"],\n    githubUrl: \"https://figma.com\",\n    liveUrl: \"https://figma.com\",\n    category: \"figma\",\n    featured: 0\n  }\n];\n\nexport const experiences: Experience[] = [\n  {\n    id: 1,\n    title: \"Freelance App Developer\",\n    company: \"Self-Employed\",\n    startDate: \"2021-01-01\",\n    endDate: null,\n    description: \"Developing mobile and web applications for clients worldwide. Specializing in React Native, Flutter, and modern web technologies.\",\n    technologies: [\"React\", \"React Native\", \"Flutter\", \"Node.js\", \"Firebase\"],\n    current: true\n  },\n  {\n    id: 2,\n    title: \"Frontend Developer\",\n    company: \"Tech Startup\",\n    startDate: \"2019-06-01\",\n    endDate: \"2020-12-31\",\n    description: \"Led frontend development for a fintech startup. Built responsive web applications and improved user experience.\",\n    technologies: [\"Vue.js\", \"TypeScript\", \"SCSS\", \"WebPack\"],\n    current: false\n  }\n];\n\nexport const testimonials: Testimonial[] = [\n  {\n    id: 1,\n    name: \"Mathesh\",\n    title: \"Software Engineer\",\n    company: \"Google\",\n    content: \"Outstanding work on our project. The attention to detail and technical expertise exceeded our expectations.\",\n    rating: 5,\n    image: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop&crop=face\"\n  },\n  {\n    id: 2,\n    name: \"Sarah Wilson\",\n    title: \"Product Manager\",\n    company: \"Microsoft\",\n    content: \"Delivered a beautiful, functional application that perfectly matched our requirements. Highly recommend!\",\n    rating: 5,\n    image: \"https://images.unsplash.com/photo-1494790108755-2616b612b786?w=100&h=100&fit=crop&crop=face\"\n  },\n  {\n    id: 3,\n    name: \"Alex Chen\",\n    title: \"CTO\",\n    company: \"StartupXYZ\",\n    content: \"Professional, reliable, and incredibly skilled. The project was completed on time and within budget.\",\n    rating: 5,\n    image: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face\"\n  },\n  {\n    id: 4,\n    name: \"Emily Rodriguez\",\n    title: \"Design Director\",\n    company: \"Adobe\",\n    content: \"Excellent communication and problem-solving skills. The final product was exactly what we envisioned.\",\n    rating: 5,\n    image: \"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=100&h=100&fit=crop&crop=face\"\n  }\n];","size_bytes":5136},"client/src/types/index.ts":{"content":"// Frontend-only type definitions\nexport interface Project {\n  id?: number;\n  title: string;\n  description: string;\n  image: string;\n  technologies: string[];\n  githubUrl: string;\n  liveUrl: string;\n  category: 'figma' | 'frontend' | 'full-stack' | 'animation';\n  featured: number;\n}\n\nexport interface Experience {\n  id?: number;\n  title: string;\n  company: string;\n  startDate: string;\n  endDate: string | null;\n  description: string;\n  technologies: string[];\n  current: boolean;\n}\n\nexport interface Contact {\n  id?: number;\n  name: string;\n  email: string;\n  message: string;\n  createdAt?: string;\n}\n\nexport interface Testimonial {\n  id?: number;\n  name: string;\n  title: string;\n  company: string;\n  content: string;\n  rating: number;\n  image?: string;\n  facebookId?: string;\n}","size_bytes":781},"dev-frontend.sh":{"content":"#!/bin/bash\n# Frontend-only development server\ncd client && npx vite --host 0.0.0.0 --port 5000","size_bytes":95}}}